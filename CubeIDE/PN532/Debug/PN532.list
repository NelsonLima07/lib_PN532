
PN532.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800396c  0800396c  0001396c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039c0  080039c0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080039c0  080039c0  000139c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039c8  080039c8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039c8  080039c8  000139c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039cc  080039cc  000139cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080039d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000068  08003a38  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08003a38  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007e95  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a3d  00000000  00000000  00027f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000818  00000000  00000000  000299b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000612  00000000  00000000  0002a1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016bd6  00000000  00000000  0002a7da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b4fa  00000000  00000000  000413b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087812  00000000  00000000  0004c8aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000271c  00000000  00000000  000d40bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d67d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003954 	.word	0x08003954

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003954 	.word	0x08003954

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	4b31      	ldr	r3, [pc, #196]	; (800065c <MX_GPIO_Init+0xe0>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a30      	ldr	r2, [pc, #192]	; (800065c <MX_GPIO_Init+0xe0>)
 800059c:	f043 0304 	orr.w	r3, r3, #4
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b2e      	ldr	r3, [pc, #184]	; (800065c <MX_GPIO_Init+0xe0>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0304 	and.w	r3, r3, #4
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	4b2a      	ldr	r3, [pc, #168]	; (800065c <MX_GPIO_Init+0xe0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a29      	ldr	r2, [pc, #164]	; (800065c <MX_GPIO_Init+0xe0>)
 80005b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b27      	ldr	r3, [pc, #156]	; (800065c <MX_GPIO_Init+0xe0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	4b23      	ldr	r3, [pc, #140]	; (800065c <MX_GPIO_Init+0xe0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a22      	ldr	r2, [pc, #136]	; (800065c <MX_GPIO_Init+0xe0>)
 80005d4:	f043 0302 	orr.w	r3, r3, #2
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b20      	ldr	r3, [pc, #128]	; (800065c <MX_GPIO_Init+0xe0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	4b1c      	ldr	r3, [pc, #112]	; (800065c <MX_GPIO_Init+0xe0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a1b      	ldr	r2, [pc, #108]	; (800065c <MX_GPIO_Init+0xe0>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b19      	ldr	r3, [pc, #100]	; (800065c <MX_GPIO_Init+0xe0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PLACA_GPIO_Port, LED_PLACA_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000608:	4815      	ldr	r0, [pc, #84]	; (8000660 <MX_GPIO_Init+0xe4>)
 800060a:	f000 fde3 	bl	80011d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_EXTERNO_GPIO_Port, LED_EXTERNO_Pin, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	2102      	movs	r1, #2
 8000612:	4814      	ldr	r0, [pc, #80]	; (8000664 <MX_GPIO_Init+0xe8>)
 8000614:	f000 fdde 	bl	80011d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_PLACA_Pin;
 8000618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PLACA_GPIO_Port, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	480b      	ldr	r0, [pc, #44]	; (8000660 <MX_GPIO_Init+0xe4>)
 8000632:	f000 fc4b 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_EXTERNO_Pin;
 8000636:	2302      	movs	r3, #2
 8000638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	2301      	movs	r3, #1
 800063c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800063e:	2302      	movs	r3, #2
 8000640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_EXTERNO_GPIO_Port, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_GPIO_Init+0xe8>)
 800064e:	f000 fc3d 	bl	8000ecc <HAL_GPIO_Init>

}
 8000652:	bf00      	nop
 8000654:	3728      	adds	r7, #40	; 0x28
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40020800 	.word	0x40020800
 8000664:	40020400 	.word	0x40020400

08000668 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_I2C1_Init+0x50>)
 800066e:	4a13      	ldr	r2, [pc, #76]	; (80006bc <MX_I2C1_Init+0x54>)
 8000670:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000674:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <MX_I2C1_Init+0x58>)
 8000676:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000686:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800068a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <MX_I2C1_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_I2C1_Init+0x50>)
 80006a6:	f000 fdc9 	bl	800123c <HAL_I2C_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b0:	f000 f8ba 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000084 	.word	0x20000084
 80006bc:	40005400 	.word	0x40005400
 80006c0:	000186a0 	.word	0x000186a0

080006c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a19      	ldr	r2, [pc, #100]	; (8000748 <HAL_I2C_MspInit+0x84>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d12b      	bne.n	800073e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <HAL_I2C_MspInit+0x88>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a17      	ldr	r2, [pc, #92]	; (800074c <HAL_I2C_MspInit+0x88>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <HAL_I2C_MspInit+0x88>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000702:	23c0      	movs	r3, #192	; 0xc0
 8000704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000706:	2312      	movs	r3, #18
 8000708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000712:	2304      	movs	r3, #4
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4619      	mov	r1, r3
 800071c:	480c      	ldr	r0, [pc, #48]	; (8000750 <HAL_I2C_MspInit+0x8c>)
 800071e:	f000 fbd5 	bl	8000ecc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <HAL_I2C_MspInit+0x88>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	4a08      	ldr	r2, [pc, #32]	; (800074c <HAL_I2C_MspInit+0x88>)
 800072c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000730:	6413      	str	r3, [r2, #64]	; 0x40
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_I2C_MspInit+0x88>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800073e:	bf00      	nop
 8000740:	3728      	adds	r7, #40	; 0x28
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40005400 	.word	0x40005400
 800074c:	40023800 	.word	0x40023800
 8000750:	40020400 	.word	0x40020400

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000758:	f000 fa60 	bl	8000c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075c:	f000 f808 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000760:	f7ff ff0c 	bl	800057c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000764:	f7ff ff80 	bl	8000668 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  main_PN532();
 8000768:	f000 fa00 	bl	8000b6c <main_PN532>
  while (1)
 800076c:	e7fe      	b.n	800076c <main+0x18>
	...

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	; 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	2230      	movs	r2, #48	; 0x30
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f002 fb65 	bl	8002e4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	4b21      	ldr	r3, [pc, #132]	; (8000820 <SystemClock_Config+0xb0>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	4a20      	ldr	r2, [pc, #128]	; (8000820 <SystemClock_Config+0xb0>)
 800079e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a2:	6413      	str	r3, [r2, #64]	; 0x40
 80007a4:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <SystemClock_Config+0xb0>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <SystemClock_Config+0xb4>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a1a      	ldr	r2, [pc, #104]	; (8000824 <SystemClock_Config+0xb4>)
 80007ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <SystemClock_Config+0xb4>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007cc:	2301      	movs	r3, #1
 80007ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 fd26 	bl	8002230 <HAL_RCC_OscConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80007ea:	f000 f81d 	bl	8000828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ee:	230f      	movs	r3, #15
 80007f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80007f2:	2301      	movs	r3, #1
 80007f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f001 ff89 	bl	8002720 <HAL_RCC_ClockConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000814:	f000 f808 	bl	8000828 <Error_Handler>
  }
}
 8000818:	bf00      	nop
 800081a:	3750      	adds	r7, #80	; 0x50
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40023800 	.word	0x40023800
 8000824:	40007000 	.word	0x40007000

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000830:	e7fe      	b.n	8000830 <Error_Handler+0x8>
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <HAL_MspInit+0x4c>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <HAL_MspInit+0x4c>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000848:	6453      	str	r3, [r2, #68]	; 0x44
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <HAL_MspInit+0x4c>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_MspInit+0x4c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_MspInit+0x4c>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	6413      	str	r3, [r2, #64]	; 0x40
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_MspInit+0x4c>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000888:	e7fe      	b.n	8000888 <NMI_Handler+0x4>

0800088a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <HardFault_Handler+0x4>

08000890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <MemManage_Handler+0x4>

08000896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d0:	f000 f9f6 	bl	8000cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	e00a      	b.n	8000900 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008ea:	f3af 8000 	nop.w
 80008ee:	4601      	mov	r1, r0
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	60ba      	str	r2, [r7, #8]
 80008f6:	b2ca      	uxtb	r2, r1
 80008f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	3301      	adds	r3, #1
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	697a      	ldr	r2, [r7, #20]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	429a      	cmp	r2, r3
 8000906:	dbf0      	blt.n	80008ea <_read+0x12>
  }

  return len;
 8000908:	687b      	ldr	r3, [r7, #4]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b086      	sub	sp, #24
 8000916:	af00      	add	r7, sp, #0
 8000918:	60f8      	str	r0, [r7, #12]
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
 8000922:	e009      	b.n	8000938 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	1c5a      	adds	r2, r3, #1
 8000928:	60ba      	str	r2, [r7, #8]
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4618      	mov	r0, r3
 800092e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	3301      	adds	r3, #1
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	429a      	cmp	r2, r3
 800093e:	dbf1      	blt.n	8000924 <_write+0x12>
  }
  return len;
 8000940:	687b      	ldr	r3, [r7, #4]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <_close>:

int _close(int file)
{
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000952:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000956:	4618      	mov	r0, r3
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000972:	605a      	str	r2, [r3, #4]
  return 0;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <_isatty>:

int _isatty(int file)
{
 8000982:	b480      	push	{r7}
 8000984:	b083      	sub	sp, #12
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800098a:	2301      	movs	r3, #1
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009bc:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <_sbrk+0x5c>)
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <_sbrk+0x60>)
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d102      	bne.n	80009d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <_sbrk+0x64>)
 80009d2:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <_sbrk+0x68>)
 80009d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <_sbrk+0x64>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d207      	bcs.n	80009f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e4:	f002 fa92 	bl	8002f0c <__errno>
 80009e8:	4603      	mov	r3, r0
 80009ea:	220c      	movs	r2, #12
 80009ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
 80009f2:	e009      	b.n	8000a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <_sbrk+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009fa:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <_sbrk+0x64>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <_sbrk+0x64>)
 8000a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a06:	68fb      	ldr	r3, [r7, #12]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20020000 	.word	0x20020000
 8000a14:	00000400 	.word	0x00000400
 8000a18:	200000d8 	.word	0x200000d8
 8000a1c:	20000230 	.word	0x20000230

08000a20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <SystemInit+0x20>)
 8000a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <SystemInit+0x20>)
 8000a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <j3_PN532_Send>:
#include <string.h>
#include <stdlib.h>


void j3_PN532_Send(TPN532* _pn532, uint8_t _cmd,  uint8_t *_msg,  uint8_t _tam)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b094      	sub	sp, #80	; 0x50
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	607a      	str	r2, [r7, #4]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	460b      	mov	r3, r1
 8000a52:	72fb      	strb	r3, [r7, #11]
 8000a54:	4613      	mov	r3, r2
 8000a56:	72bb      	strb	r3, [r7, #10]
  uint8_t packet[PN532_DATA_PACKET_SIZE];

   // Prepara o pacote de comando
  packet[0] = PN532_DATA_PACKET_SIZE - 1; // Tamanho total do pacote (sem CRC)
 8000a58:	233f      	movs	r3, #63	; 0x3f
 8000a5a:	743b      	strb	r3, [r7, #16]
  packet[1] = _cmd;                 // Comando
 8000a5c:	7afb      	ldrb	r3, [r7, #11]
 8000a5e:	747b      	strb	r3, [r7, #17]
  packet[2] = _tam;            // Tamanho dos dados (se houver)
 8000a60:	7abb      	ldrb	r3, [r7, #10]
 8000a62:	74bb      	strb	r3, [r7, #18]

  // Copia os dados para o pacote (se houver)
  if (_tam > 0) {
 8000a64:	7abb      	ldrb	r3, [r7, #10]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d007      	beq.n	8000a7a <j3_PN532_Send+0x36>
    memcpy(&packet[3], _msg, _tam);
 8000a6a:	7aba      	ldrb	r2, [r7, #10]
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	3303      	adds	r3, #3
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f002 fa76 	bl	8002f66 <memcpy>
  }

   // Envia o pacote I2C
   (_pn532->ptrFuncSend_I2C)(_pn532->address, packet, PN532_DATA_PACKET_SIZE);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	7810      	ldrb	r0, [r2, #0]
 8000a82:	f107 0110 	add.w	r1, r7, #16
 8000a86:	2240      	movs	r2, #64	; 0x40
 8000a88:	4798      	blx	r3
}
 8000a8a:	bf00      	nop
 8000a8c:	3750      	adds	r7, #80	; 0x50
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <j3_PN532_new>:



//TPN532* j3_PN532_new(I2C_HandleTypeDef* _i2c, uint8_t _i2c_address)
TPN532* j3_PN532_new(uint8_t _i2c_address)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b084      	sub	sp, #16
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	4603      	mov	r3, r0
 8000a9a:	71fb      	strb	r3, [r7, #7]
  TPN532* auxPN532;

  auxPN532 = malloc(sizeof(TPN532));
 8000a9c:	200c      	movs	r0, #12
 8000a9e:	f002 f80b 	bl	8002ab8 <malloc>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	60fb      	str	r3, [r7, #12]
  auxPN532->address = _i2c_address;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	79fa      	ldrb	r2, [r7, #7]
 8000aaa:	701a      	strb	r2, [r3, #0]
  //auxPN532->i2c = _i2c;
  auxPN532->buffer = malloc(128 * 8 * sizeof(uint8_t));
 8000aac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ab0:	f002 f802 	bl	8002ab8 <malloc>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	605a      	str	r2, [r3, #4]
  memset(auxPN532->buffer, 0x00, 128 * 8 * sizeof(uint8_t));
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f002 f9c1 	bl	8002e4e <memset>



  return auxPN532;
 8000acc:	68fb      	ldr	r3, [r7, #12]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <j3_PN532_SetSendFunction>:

uint8_t j3_PN532_SetSendFunction(TPN532 *_pn532, TfuncSend_I2C *_ptrFuncSend_I2C)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
 8000ade:	6039      	str	r1, [r7, #0]
  _pn532->ptrFuncSend_I2C = _ptrFuncSend_I2C;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	683a      	ldr	r2, [r7, #0]
 8000ae4:	609a      	str	r2, [r3, #8]
  return 0;
 8000ae6:	2300      	movs	r3, #0
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <j3_PN532_GravaTag>:

uint8_t j3_PN532_GravaTag(TPN532 *_pn532, uint8_t *_msg, uint8_t _tam)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	4613      	mov	r3, r2
 8000b00:	71fb      	strb	r3, [r7, #7]
  j3_PN532_Send(_pn532, PN532_CMD_VERSION, _msg, _tam);
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	68ba      	ldr	r2, [r7, #8]
 8000b06:	2100      	movs	r1, #0
 8000b08:	68f8      	ldr	r0, [r7, #12]
 8000b0a:	f7ff ff9b 	bl	8000a44 <j3_PN532_Send>
  return 0;
 8000b0e:	2300      	movs	r3, #0
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <SendI2C>:

#define TEMPO_LED_EXTERNO 3000 /* Tempo definido em milisegundos ms  */


int SendI2C(uint8_t _endereco, uint8_t *_msg, uint8_t tam)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b094      	sub	sp, #80	; 0x50
 8000b1c:	af02      	add	r7, sp, #8
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
 8000b24:	4613      	mov	r3, r2
 8000b26:	71bb      	strb	r3, [r7, #6]
  char rxBuffer[63];
  //  HAL_I2C_Master_Transmit_IT(&hi2c1, _endereco, _msg, tam);
  HAL_I2C_Master_Transmit(&hi2c1, _endereco, _msg, tam, 100);
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	b299      	uxth	r1, r3
 8000b2c:	79bb      	ldrb	r3, [r7, #6]
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	2264      	movs	r2, #100	; 0x64
 8000b32:	9200      	str	r2, [sp, #0]
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	480c      	ldr	r0, [pc, #48]	; (8000b68 <SendI2C+0x50>)
 8000b38:	f000 fcc4 	bl	80014c4 <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Receive(&hi2c1, _endereco, rxBuffer, 10, 500);
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	b299      	uxth	r1, r3
 8000b40:	f107 0208 	add.w	r2, r7, #8
 8000b44:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	230a      	movs	r3, #10
 8000b4c:	4806      	ldr	r0, [pc, #24]	; (8000b68 <SendI2C+0x50>)
 8000b4e:	f000 fdb7 	bl	80016c0 <HAL_I2C_Master_Receive>

  printf(rxBuffer);
 8000b52:	f107 0308 	add.w	r3, r7, #8
 8000b56:	4618      	mov	r0, r3
 8000b58:	f002 f924 	bl	8002da4 <iprintf>
  HAL_GPIO_TogglePin(LED_EXTERNO_GPIO_Port, LED_EXTERNO_Pin);
  HAL_Delay(200);
  HAL_GPIO_TogglePin(LED_EXTERNO_GPIO_Port, LED_EXTERNO_Pin);
  */

  return 0;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3748      	adds	r7, #72	; 0x48
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000084 	.word	0x20000084

08000b6c <main_PN532>:



int main_PN532 (void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
  uint32_t tmrLED = HAL_GetTick();
 8000b72:	f000 f8b9 	bl	8000ce8 <HAL_GetTick>
 8000b76:	6078      	str	r0, [r7, #4]
  TPN532* pn532;


  pn532 = j3_PN532_new(PN532_ADDRESS);
 8000b78:	2024      	movs	r0, #36	; 0x24
 8000b7a:	f7ff ff8a 	bl	8000a92 <j3_PN532_new>
 8000b7e:	6038      	str	r0, [r7, #0]
  j3_PN532_SetSendFunction(pn532, &SendI2C);
 8000b80:	490e      	ldr	r1, [pc, #56]	; (8000bbc <main_PN532+0x50>)
 8000b82:	6838      	ldr	r0, [r7, #0]
 8000b84:	f7ff ffa7 	bl	8000ad6 <j3_PN532_SetSendFunction>

  j3_PN532_GravaTag(pn532, "0x00", 1);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	490d      	ldr	r1, [pc, #52]	; (8000bc0 <main_PN532+0x54>)
 8000b8c:	6838      	ldr	r0, [r7, #0]
 8000b8e:	f7ff ffb1 	bl	8000af4 <j3_PN532_GravaTag>


  while(1)
    {
      //tmrLED = HAL_GetTick();
      if (HAL_GetTick() - tmrLED >= TEMPO_LED_EXTERNO)
 8000b92:	f000 f8a9 	bl	8000ce8 <HAL_GetTick>
 8000b96:	4602      	mov	r2, r0
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d9f6      	bls.n	8000b92 <main_PN532+0x26>
      {
	tmrLED = HAL_GetTick();
 8000ba4:	f000 f8a0 	bl	8000ce8 <HAL_GetTick>
 8000ba8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_EXTERNO_GPIO_Port, LED_EXTERNO_Pin);
 8000baa:	2102      	movs	r1, #2
 8000bac:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <main_PN532+0x58>)
 8000bae:	f000 fb2a 	bl	8001206 <HAL_GPIO_TogglePin>
	tmrLED = HAL_GetTick();
 8000bb2:	f000 f899 	bl	8000ce8 <HAL_GetTick>
 8000bb6:	6078      	str	r0, [r7, #4]
      if (HAL_GetTick() - tmrLED >= TEMPO_LED_EXTERNO)
 8000bb8:	e7eb      	b.n	8000b92 <main_PN532+0x26>
 8000bba:	bf00      	nop
 8000bbc:	08000b19 	.word	0x08000b19
 8000bc0:	0800396c 	.word	0x0800396c
 8000bc4:	40020400 	.word	0x40020400

08000bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bcc:	f7ff ff28 	bl	8000a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd0:	480c      	ldr	r0, [pc, #48]	; (8000c04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bd2:	490d      	ldr	r1, [pc, #52]	; (8000c08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000be8:	4c0a      	ldr	r4, [pc, #40]	; (8000c14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f002 f98f 	bl	8002f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfa:	f7ff fdab 	bl	8000754 <main>
  bx  lr    
 8000bfe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c0c:	080039d0 	.word	0x080039d0
  ldr r2, =_sbss
 8000c10:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c14:	2000022c 	.word	0x2000022c

08000c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC_IRQHandler>
	...

08000c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c20:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <HAL_Init+0x40>)
 8000c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <HAL_Init+0x40>)
 8000c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a07      	ldr	r2, [pc, #28]	; (8000c5c <HAL_Init+0x40>)
 8000c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c44:	2003      	movs	r0, #3
 8000c46:	f000 f90d 	bl	8000e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4a:	200f      	movs	r0, #15
 8000c4c:	f000 f808 	bl	8000c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c50:	f7ff fdf0 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023c00 	.word	0x40023c00

08000c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_InitTick+0x54>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_InitTick+0x58>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 f917 	bl	8000eb2 <HAL_SYSTICK_Config>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e00e      	b.n	8000cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b0f      	cmp	r3, #15
 8000c92:	d80a      	bhi.n	8000caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c94:	2200      	movs	r2, #0
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	f000 f8ed 	bl	8000e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca0:	4a06      	ldr	r2, [pc, #24]	; (8000cbc <HAL_InitTick+0x5c>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e000      	b.n	8000cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000004 	.word	0x20000004

08000cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x20>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x24>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <HAL_IncTick+0x24>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	200000dc 	.word	0x200000dc

08000ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <HAL_GetTick+0x14>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	200000dc 	.word	0x200000dc

08000d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d32:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	60d3      	str	r3, [r2, #12]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <__NVIC_GetPriorityGrouping+0x18>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	0a1b      	lsrs	r3, r3, #8
 8000d52:	f003 0307 	and.w	r3, r3, #7
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	db0a      	blt.n	8000d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	490c      	ldr	r1, [pc, #48]	; (8000db0 <__NVIC_SetPriority+0x4c>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	0112      	lsls	r2, r2, #4
 8000d84:	b2d2      	uxtb	r2, r2
 8000d86:	440b      	add	r3, r1
 8000d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d8c:	e00a      	b.n	8000da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4908      	ldr	r1, [pc, #32]	; (8000db4 <__NVIC_SetPriority+0x50>)
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	f003 030f 	and.w	r3, r3, #15
 8000d9a:	3b04      	subs	r3, #4
 8000d9c:	0112      	lsls	r2, r2, #4
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	440b      	add	r3, r1
 8000da2:	761a      	strb	r2, [r3, #24]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000e100 	.word	0xe000e100
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b089      	sub	sp, #36	; 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	f1c3 0307 	rsb	r3, r3, #7
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	bf28      	it	cs
 8000dd6:	2304      	movcs	r3, #4
 8000dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	2b06      	cmp	r3, #6
 8000de0:	d902      	bls.n	8000de8 <NVIC_EncodePriority+0x30>
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3b03      	subs	r3, #3
 8000de6:	e000      	b.n	8000dea <NVIC_EncodePriority+0x32>
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	f04f 32ff 	mov.w	r2, #4294967295
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43da      	mvns	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e00:	f04f 31ff 	mov.w	r1, #4294967295
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0a:	43d9      	mvns	r1, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	4313      	orrs	r3, r2
         );
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3724      	adds	r7, #36	; 0x24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e30:	d301      	bcc.n	8000e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00f      	b.n	8000e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <SysTick_Config+0x40>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3e:	210f      	movs	r1, #15
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f7ff ff8e 	bl	8000d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <SysTick_Config+0x40>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4e:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <SysTick_Config+0x40>)
 8000e50:	2207      	movs	r2, #7
 8000e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	e000e010 	.word	0xe000e010

08000e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ff47 	bl	8000d00 <__NVIC_SetPriorityGrouping>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b086      	sub	sp, #24
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8c:	f7ff ff5c 	bl	8000d48 <__NVIC_GetPriorityGrouping>
 8000e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	68b9      	ldr	r1, [r7, #8]
 8000e96:	6978      	ldr	r0, [r7, #20]
 8000e98:	f7ff ff8e 	bl	8000db8 <NVIC_EncodePriority>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff5d 	bl	8000d64 <__NVIC_SetPriority>
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ffb0 	bl	8000e20 <SysTick_Config>
 8000ec0:	4603      	mov	r3, r0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
 8000ee6:	e159      	b.n	800119c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	f040 8148 	bne.w	8001196 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d005      	beq.n	8000f1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d130      	bne.n	8000f80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f54:	2201      	movs	r2, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	091b      	lsrs	r3, r3, #4
 8000f6a:	f003 0201 	and.w	r2, r3, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d017      	beq.n	8000fbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d123      	bne.n	8001010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	08da      	lsrs	r2, r3, #3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3208      	adds	r2, #8
 8000fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	220f      	movs	r2, #15
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	691a      	ldr	r2, [r3, #16]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	08da      	lsrs	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3208      	adds	r2, #8
 800100a:	69b9      	ldr	r1, [r7, #24]
 800100c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0203 	and.w	r2, r3, #3
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 80a2 	beq.w	8001196 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b57      	ldr	r3, [pc, #348]	; (80011b4 <HAL_GPIO_Init+0x2e8>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	4a56      	ldr	r2, [pc, #344]	; (80011b4 <HAL_GPIO_Init+0x2e8>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001060:	6453      	str	r3, [r2, #68]	; 0x44
 8001062:	4b54      	ldr	r3, [pc, #336]	; (80011b4 <HAL_GPIO_Init+0x2e8>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800106e:	4a52      	ldr	r2, [pc, #328]	; (80011b8 <HAL_GPIO_Init+0x2ec>)
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	220f      	movs	r2, #15
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a49      	ldr	r2, [pc, #292]	; (80011bc <HAL_GPIO_Init+0x2f0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d019      	beq.n	80010ce <HAL_GPIO_Init+0x202>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a48      	ldr	r2, [pc, #288]	; (80011c0 <HAL_GPIO_Init+0x2f4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d013      	beq.n	80010ca <HAL_GPIO_Init+0x1fe>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a47      	ldr	r2, [pc, #284]	; (80011c4 <HAL_GPIO_Init+0x2f8>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d00d      	beq.n	80010c6 <HAL_GPIO_Init+0x1fa>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a46      	ldr	r2, [pc, #280]	; (80011c8 <HAL_GPIO_Init+0x2fc>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d007      	beq.n	80010c2 <HAL_GPIO_Init+0x1f6>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a45      	ldr	r2, [pc, #276]	; (80011cc <HAL_GPIO_Init+0x300>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d101      	bne.n	80010be <HAL_GPIO_Init+0x1f2>
 80010ba:	2304      	movs	r3, #4
 80010bc:	e008      	b.n	80010d0 <HAL_GPIO_Init+0x204>
 80010be:	2307      	movs	r3, #7
 80010c0:	e006      	b.n	80010d0 <HAL_GPIO_Init+0x204>
 80010c2:	2303      	movs	r3, #3
 80010c4:	e004      	b.n	80010d0 <HAL_GPIO_Init+0x204>
 80010c6:	2302      	movs	r3, #2
 80010c8:	e002      	b.n	80010d0 <HAL_GPIO_Init+0x204>
 80010ca:	2301      	movs	r3, #1
 80010cc:	e000      	b.n	80010d0 <HAL_GPIO_Init+0x204>
 80010ce:	2300      	movs	r3, #0
 80010d0:	69fa      	ldr	r2, [r7, #28]
 80010d2:	f002 0203 	and.w	r2, r2, #3
 80010d6:	0092      	lsls	r2, r2, #2
 80010d8:	4093      	lsls	r3, r2
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e0:	4935      	ldr	r1, [pc, #212]	; (80011b8 <HAL_GPIO_Init+0x2ec>)
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	3302      	adds	r3, #2
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ee:	4b38      	ldr	r3, [pc, #224]	; (80011d0 <HAL_GPIO_Init+0x304>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001112:	4a2f      	ldr	r2, [pc, #188]	; (80011d0 <HAL_GPIO_Init+0x304>)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001118:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <HAL_GPIO_Init+0x304>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800113c:	4a24      	ldr	r2, [pc, #144]	; (80011d0 <HAL_GPIO_Init+0x304>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001142:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <HAL_GPIO_Init+0x304>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001166:	4a1a      	ldr	r2, [pc, #104]	; (80011d0 <HAL_GPIO_Init+0x304>)
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800116c:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <HAL_GPIO_Init+0x304>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001190:	4a0f      	ldr	r2, [pc, #60]	; (80011d0 <HAL_GPIO_Init+0x304>)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3301      	adds	r3, #1
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	2b0f      	cmp	r3, #15
 80011a0:	f67f aea2 	bls.w	8000ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3724      	adds	r7, #36	; 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40013800 	.word	0x40013800
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40020400 	.word	0x40020400
 80011c4:	40020800 	.word	0x40020800
 80011c8:	40020c00 	.word	0x40020c00
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40013c00 	.word	0x40013c00

080011d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]
 80011e0:	4613      	mov	r3, r2
 80011e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e4:	787b      	ldrb	r3, [r7, #1]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ea:	887a      	ldrh	r2, [r7, #2]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011f0:	e003      	b.n	80011fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	041a      	lsls	r2, r3, #16
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	619a      	str	r2, [r3, #24]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001206:	b480      	push	{r7}
 8001208:	b085      	sub	sp, #20
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	460b      	mov	r3, r1
 8001210:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001218:	887a      	ldrh	r2, [r7, #2]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4013      	ands	r3, r2
 800121e:	041a      	lsls	r2, r3, #16
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	43d9      	mvns	r1, r3
 8001224:	887b      	ldrh	r3, [r7, #2]
 8001226:	400b      	ands	r3, r1
 8001228:	431a      	orrs	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	619a      	str	r2, [r3, #24]
}
 800122e:	bf00      	nop
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e12b      	b.n	80014a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d106      	bne.n	8001268 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fa2e 	bl	80006c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2224      	movs	r2, #36	; 0x24
 800126c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0201 	bic.w	r2, r2, #1
 800127e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800128e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800129e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012a0:	f001 fbf6 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 80012a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	4a81      	ldr	r2, [pc, #516]	; (80014b0 <HAL_I2C_Init+0x274>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d807      	bhi.n	80012c0 <HAL_I2C_Init+0x84>
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4a80      	ldr	r2, [pc, #512]	; (80014b4 <HAL_I2C_Init+0x278>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	bf94      	ite	ls
 80012b8:	2301      	movls	r3, #1
 80012ba:	2300      	movhi	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	e006      	b.n	80012ce <HAL_I2C_Init+0x92>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4a7d      	ldr	r2, [pc, #500]	; (80014b8 <HAL_I2C_Init+0x27c>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	bf94      	ite	ls
 80012c8:	2301      	movls	r3, #1
 80012ca:	2300      	movhi	r3, #0
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e0e7      	b.n	80014a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4a78      	ldr	r2, [pc, #480]	; (80014bc <HAL_I2C_Init+0x280>)
 80012da:	fba2 2303 	umull	r2, r3, r2, r3
 80012de:	0c9b      	lsrs	r3, r3, #18
 80012e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	4a6a      	ldr	r2, [pc, #424]	; (80014b0 <HAL_I2C_Init+0x274>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d802      	bhi.n	8001310 <HAL_I2C_Init+0xd4>
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	3301      	adds	r3, #1
 800130e:	e009      	b.n	8001324 <HAL_I2C_Init+0xe8>
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001316:	fb02 f303 	mul.w	r3, r2, r3
 800131a:	4a69      	ldr	r2, [pc, #420]	; (80014c0 <HAL_I2C_Init+0x284>)
 800131c:	fba2 2303 	umull	r2, r3, r2, r3
 8001320:	099b      	lsrs	r3, r3, #6
 8001322:	3301      	adds	r3, #1
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	430b      	orrs	r3, r1
 800132a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001336:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	495c      	ldr	r1, [pc, #368]	; (80014b0 <HAL_I2C_Init+0x274>)
 8001340:	428b      	cmp	r3, r1
 8001342:	d819      	bhi.n	8001378 <HAL_I2C_Init+0x13c>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	1e59      	subs	r1, r3, #1
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001352:	1c59      	adds	r1, r3, #1
 8001354:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001358:	400b      	ands	r3, r1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00a      	beq.n	8001374 <HAL_I2C_Init+0x138>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	1e59      	subs	r1, r3, #1
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fbb1 f3f3 	udiv	r3, r1, r3
 800136c:	3301      	adds	r3, #1
 800136e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001372:	e051      	b.n	8001418 <HAL_I2C_Init+0x1dc>
 8001374:	2304      	movs	r3, #4
 8001376:	e04f      	b.n	8001418 <HAL_I2C_Init+0x1dc>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d111      	bne.n	80013a4 <HAL_I2C_Init+0x168>
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	1e58      	subs	r0, r3, #1
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6859      	ldr	r1, [r3, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	440b      	add	r3, r1
 800138e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001392:	3301      	adds	r3, #1
 8001394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001398:	2b00      	cmp	r3, #0
 800139a:	bf0c      	ite	eq
 800139c:	2301      	moveq	r3, #1
 800139e:	2300      	movne	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	e012      	b.n	80013ca <HAL_I2C_Init+0x18e>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	1e58      	subs	r0, r3, #1
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6859      	ldr	r1, [r3, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	0099      	lsls	r1, r3, #2
 80013b4:	440b      	add	r3, r1
 80013b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ba:	3301      	adds	r3, #1
 80013bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	bf0c      	ite	eq
 80013c4:	2301      	moveq	r3, #1
 80013c6:	2300      	movne	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_I2C_Init+0x196>
 80013ce:	2301      	movs	r3, #1
 80013d0:	e022      	b.n	8001418 <HAL_I2C_Init+0x1dc>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10e      	bne.n	80013f8 <HAL_I2C_Init+0x1bc>
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	1e58      	subs	r0, r3, #1
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6859      	ldr	r1, [r3, #4]
 80013e2:	460b      	mov	r3, r1
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	440b      	add	r3, r1
 80013e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ec:	3301      	adds	r3, #1
 80013ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013f6:	e00f      	b.n	8001418 <HAL_I2C_Init+0x1dc>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	1e58      	subs	r0, r3, #1
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6859      	ldr	r1, [r3, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	0099      	lsls	r1, r3, #2
 8001408:	440b      	add	r3, r1
 800140a:	fbb0 f3f3 	udiv	r3, r0, r3
 800140e:	3301      	adds	r3, #1
 8001410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001414:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	6809      	ldr	r1, [r1, #0]
 800141c:	4313      	orrs	r3, r2
 800141e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69da      	ldr	r2, [r3, #28]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	431a      	orrs	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	430a      	orrs	r2, r1
 800143a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001446:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6911      	ldr	r1, [r2, #16]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	68d2      	ldr	r2, [r2, #12]
 8001452:	4311      	orrs	r1, r2
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	430b      	orrs	r3, r1
 800145a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695a      	ldr	r2, [r3, #20]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f042 0201 	orr.w	r2, r2, #1
 8001486:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2220      	movs	r2, #32
 8001492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	000186a0 	.word	0x000186a0
 80014b4:	001e847f 	.word	0x001e847f
 80014b8:	003d08ff 	.word	0x003d08ff
 80014bc:	431bde83 	.word	0x431bde83
 80014c0:	10624dd3 	.word	0x10624dd3

080014c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	461a      	mov	r2, r3
 80014d0:	460b      	mov	r3, r1
 80014d2:	817b      	strh	r3, [r7, #10]
 80014d4:	4613      	mov	r3, r2
 80014d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014d8:	f7ff fc06 	bl	8000ce8 <HAL_GetTick>
 80014dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b20      	cmp	r3, #32
 80014e8:	f040 80e0 	bne.w	80016ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2319      	movs	r3, #25
 80014f2:	2201      	movs	r2, #1
 80014f4:	4970      	ldr	r1, [pc, #448]	; (80016b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f000 fc64 	bl	8001dc4 <I2C_WaitOnFlagUntilTimeout>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001502:	2302      	movs	r3, #2
 8001504:	e0d3      	b.n	80016ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800150c:	2b01      	cmp	r3, #1
 800150e:	d101      	bne.n	8001514 <HAL_I2C_Master_Transmit+0x50>
 8001510:	2302      	movs	r3, #2
 8001512:	e0cc      	b.n	80016ae <HAL_I2C_Master_Transmit+0x1ea>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b01      	cmp	r3, #1
 8001528:	d007      	beq.n	800153a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f042 0201 	orr.w	r2, r2, #1
 8001538:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001548:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2221      	movs	r2, #33	; 0x21
 800154e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2210      	movs	r2, #16
 8001556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2200      	movs	r2, #0
 800155e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	893a      	ldrh	r2, [r7, #8]
 800156a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001570:	b29a      	uxth	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4a50      	ldr	r2, [pc, #320]	; (80016bc <HAL_I2C_Master_Transmit+0x1f8>)
 800157a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800157c:	8979      	ldrh	r1, [r7, #10]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	6a3a      	ldr	r2, [r7, #32]
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f000 face 	bl	8001b24 <I2C_MasterRequestWrite>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e08d      	b.n	80016ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80015a8:	e066      	b.n	8001678 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	6a39      	ldr	r1, [r7, #32]
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f000 fd22 	bl	8001ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00d      	beq.n	80015d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	2b04      	cmp	r3, #4
 80015c0:	d107      	bne.n	80015d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e06b      	b.n	80016ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	781a      	ldrb	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	3b01      	subs	r3, #1
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fe:	3b01      	subs	r3, #1
 8001600:	b29a      	uxth	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b04      	cmp	r3, #4
 8001612:	d11b      	bne.n	800164c <HAL_I2C_Master_Transmit+0x188>
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001618:	2b00      	cmp	r3, #0
 800161a:	d017      	beq.n	800164c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	781a      	ldrb	r2, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	1c5a      	adds	r2, r3, #1
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001636:	b29b      	uxth	r3, r3
 8001638:	3b01      	subs	r3, #1
 800163a:	b29a      	uxth	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001644:	3b01      	subs	r3, #1
 8001646:	b29a      	uxth	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	6a39      	ldr	r1, [r7, #32]
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f000 fd19 	bl	8002088 <I2C_WaitOnBTFFlagUntilTimeout>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00d      	beq.n	8001678 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	2b04      	cmp	r3, #4
 8001662:	d107      	bne.n	8001674 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001672:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e01a      	b.n	80016ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800167c:	2b00      	cmp	r3, #0
 800167e:	d194      	bne.n	80015aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800168e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2220      	movs	r2, #32
 8001694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	e000      	b.n	80016ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80016ac:	2302      	movs	r3, #2
  }
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	00100002 	.word	0x00100002
 80016bc:	ffff0000 	.word	0xffff0000

080016c0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08c      	sub	sp, #48	; 0x30
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	461a      	mov	r2, r3
 80016cc:	460b      	mov	r3, r1
 80016ce:	817b      	strh	r3, [r7, #10]
 80016d0:	4613      	mov	r3, r2
 80016d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016d4:	f7ff fb08 	bl	8000ce8 <HAL_GetTick>
 80016d8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b20      	cmp	r3, #32
 80016e4:	f040 8217 	bne.w	8001b16 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2319      	movs	r3, #25
 80016ee:	2201      	movs	r2, #1
 80016f0:	497c      	ldr	r1, [pc, #496]	; (80018e4 <HAL_I2C_Master_Receive+0x224>)
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f000 fb66 	bl	8001dc4 <I2C_WaitOnFlagUntilTimeout>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80016fe:	2302      	movs	r3, #2
 8001700:	e20a      	b.n	8001b18 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001708:	2b01      	cmp	r3, #1
 800170a:	d101      	bne.n	8001710 <HAL_I2C_Master_Receive+0x50>
 800170c:	2302      	movs	r3, #2
 800170e:	e203      	b.n	8001b18 <HAL_I2C_Master_Receive+0x458>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b01      	cmp	r3, #1
 8001724:	d007      	beq.n	8001736 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f042 0201 	orr.w	r2, r2, #1
 8001734:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001744:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2222      	movs	r2, #34	; 0x22
 800174a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2210      	movs	r2, #16
 8001752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	893a      	ldrh	r2, [r7, #8]
 8001766:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176c:	b29a      	uxth	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4a5c      	ldr	r2, [pc, #368]	; (80018e8 <HAL_I2C_Master_Receive+0x228>)
 8001776:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001778:	8979      	ldrh	r1, [r7, #10]
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f000 fa52 	bl	8001c28 <I2C_MasterRequestRead>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e1c4      	b.n	8001b18 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001792:	2b00      	cmp	r3, #0
 8001794:	d113      	bne.n	80017be <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	623b      	str	r3, [r7, #32]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	623b      	str	r3, [r7, #32]
 80017aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	e198      	b.n	8001af0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d11b      	bne.n	80017fe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	61fb      	str	r3, [r7, #28]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	61fb      	str	r3, [r7, #28]
 80017ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	e178      	b.n	8001af0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001802:	2b02      	cmp	r3, #2
 8001804:	d11b      	bne.n	800183e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001814:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001824:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	61bb      	str	r3, [r7, #24]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	61bb      	str	r3, [r7, #24]
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	e158      	b.n	8001af0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800184c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001864:	e144      	b.n	8001af0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800186a:	2b03      	cmp	r3, #3
 800186c:	f200 80f1 	bhi.w	8001a52 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001874:	2b01      	cmp	r3, #1
 8001876:	d123      	bne.n	80018c0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800187a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f000 fc4b 	bl	8002118 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e145      	b.n	8001b18 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	691a      	ldr	r2, [r3, #16]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a8:	3b01      	subs	r3, #1
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	3b01      	subs	r3, #1
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018be:	e117      	b.n	8001af0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d14e      	bne.n	8001966 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ce:	2200      	movs	r2, #0
 80018d0:	4906      	ldr	r1, [pc, #24]	; (80018ec <HAL_I2C_Master_Receive+0x22c>)
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f000 fa76 	bl	8001dc4 <I2C_WaitOnFlagUntilTimeout>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d008      	beq.n	80018f0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e11a      	b.n	8001b18 <HAL_I2C_Master_Receive+0x458>
 80018e2:	bf00      	nop
 80018e4:	00100002 	.word	0x00100002
 80018e8:	ffff0000 	.word	0xffff0000
 80018ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	691a      	ldr	r2, [r3, #16]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191c:	3b01      	subs	r3, #1
 800191e:	b29a      	uxth	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001928:	b29b      	uxth	r3, r3
 800192a:	3b01      	subs	r3, #1
 800192c:	b29a      	uxth	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	691a      	ldr	r2, [r3, #16]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194e:	3b01      	subs	r3, #1
 8001950:	b29a      	uxth	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195a:	b29b      	uxth	r3, r3
 800195c:	3b01      	subs	r3, #1
 800195e:	b29a      	uxth	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001964:	e0c4      	b.n	8001af0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800196c:	2200      	movs	r2, #0
 800196e:	496c      	ldr	r1, [pc, #432]	; (8001b20 <HAL_I2C_Master_Receive+0x460>)
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 fa27 	bl	8001dc4 <I2C_WaitOnFlagUntilTimeout>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0cb      	b.n	8001b18 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800198e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691a      	ldr	r2, [r3, #16]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	1c5a      	adds	r2, r3, #1
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ac:	3b01      	subs	r3, #1
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	3b01      	subs	r3, #1
 80019bc:	b29a      	uxth	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c8:	2200      	movs	r2, #0
 80019ca:	4955      	ldr	r1, [pc, #340]	; (8001b20 <HAL_I2C_Master_Receive+0x460>)
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f000 f9f9 	bl	8001dc4 <I2C_WaitOnFlagUntilTimeout>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e09d      	b.n	8001b18 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	691a      	ldr	r2, [r3, #16]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	3b01      	subs	r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a30:	1c5a      	adds	r2, r3, #1
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a50:	e04e      	b.n	8001af0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 fb5e 	bl	8002118 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e058      	b.n	8001b18 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a82:	3b01      	subs	r3, #1
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	3b01      	subs	r3, #1
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d124      	bne.n	8001af0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d107      	bne.n	8001abe <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001abc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	691a      	ldr	r2, [r3, #16]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ada:	3b01      	subs	r3, #1
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f47f aeb6 	bne.w	8001866 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2220      	movs	r2, #32
 8001afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	e000      	b.n	8001b18 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001b16:	2302      	movs	r3, #2
  }
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3728      	adds	r7, #40	; 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	00010004 	.word	0x00010004

08001b24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	460b      	mov	r3, r1
 8001b32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d006      	beq.n	8001b4e <I2C_MasterRequestWrite+0x2a>
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d003      	beq.n	8001b4e <I2C_MasterRequestWrite+0x2a>
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b4c:	d108      	bne.n	8001b60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	e00b      	b.n	8001b78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b64:	2b12      	cmp	r3, #18
 8001b66:	d107      	bne.n	8001b78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f000 f91d 	bl	8001dc4 <I2C_WaitOnFlagUntilTimeout>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00d      	beq.n	8001bac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b9e:	d103      	bne.n	8001ba8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e035      	b.n	8001c18 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bb4:	d108      	bne.n	8001bc8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bb6:	897b      	ldrh	r3, [r7, #10]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001bc4:	611a      	str	r2, [r3, #16]
 8001bc6:	e01b      	b.n	8001c00 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001bc8:	897b      	ldrh	r3, [r7, #10]
 8001bca:	11db      	asrs	r3, r3, #7
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	f003 0306 	and.w	r3, r3, #6
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	f063 030f 	orn	r3, r3, #15
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	490e      	ldr	r1, [pc, #56]	; (8001c20 <I2C_MasterRequestWrite+0xfc>)
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 f966 	bl	8001eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e010      	b.n	8001c18 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001bf6:	897b      	ldrh	r3, [r7, #10]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	4907      	ldr	r1, [pc, #28]	; (8001c24 <I2C_MasterRequestWrite+0x100>)
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f956 	bl	8001eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	00010008 	.word	0x00010008
 8001c24:	00010002 	.word	0x00010002

08001c28 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af02      	add	r7, sp, #8
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	460b      	mov	r3, r1
 8001c36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c4c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d006      	beq.n	8001c62 <I2C_MasterRequestRead+0x3a>
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d003      	beq.n	8001c62 <I2C_MasterRequestRead+0x3a>
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c60:	d108      	bne.n	8001c74 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	e00b      	b.n	8001c8c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	2b11      	cmp	r3, #17
 8001c7a:	d107      	bne.n	8001c8c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f000 f893 	bl	8001dc4 <I2C_WaitOnFlagUntilTimeout>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00d      	beq.n	8001cc0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cb2:	d103      	bne.n	8001cbc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e079      	b.n	8001db4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cc8:	d108      	bne.n	8001cdc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001cca:	897b      	ldrh	r3, [r7, #10]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	611a      	str	r2, [r3, #16]
 8001cda:	e05f      	b.n	8001d9c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001cdc:	897b      	ldrh	r3, [r7, #10]
 8001cde:	11db      	asrs	r3, r3, #7
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	f003 0306 	and.w	r3, r3, #6
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	f063 030f 	orn	r3, r3, #15
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	4930      	ldr	r1, [pc, #192]	; (8001dbc <I2C_MasterRequestRead+0x194>)
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 f8dc 	bl	8001eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e054      	b.n	8001db4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d0a:	897b      	ldrh	r3, [r7, #10]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	4929      	ldr	r1, [pc, #164]	; (8001dc0 <I2C_MasterRequestRead+0x198>)
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 f8cc 	bl	8001eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e044      	b.n	8001db4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d4e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 f831 	bl	8001dc4 <I2C_WaitOnFlagUntilTimeout>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00d      	beq.n	8001d84 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d76:	d103      	bne.n	8001d80 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d7e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e017      	b.n	8001db4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001d84:	897b      	ldrh	r3, [r7, #10]
 8001d86:	11db      	asrs	r3, r3, #7
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	f003 0306 	and.w	r3, r3, #6
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	f063 030e 	orn	r3, r3, #14
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	4907      	ldr	r1, [pc, #28]	; (8001dc0 <I2C_MasterRequestRead+0x198>)
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 f888 	bl	8001eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	00010008 	.word	0x00010008
 8001dc0:	00010002 	.word	0x00010002

08001dc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dd4:	e048      	b.n	8001e68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ddc:	d044      	beq.n	8001e68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dde:	f7fe ff83 	bl	8000ce8 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d302      	bcc.n	8001df4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d139      	bne.n	8001e68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	0c1b      	lsrs	r3, r3, #16
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d10d      	bne.n	8001e1a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	43da      	mvns	r2, r3
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	bf0c      	ite	eq
 8001e10:	2301      	moveq	r3, #1
 8001e12:	2300      	movne	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	e00c      	b.n	8001e34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	43da      	mvns	r2, r3
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	4013      	ands	r3, r2
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf0c      	ite	eq
 8001e2c:	2301      	moveq	r3, #1
 8001e2e:	2300      	movne	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	461a      	mov	r2, r3
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d116      	bne.n	8001e68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2220      	movs	r2, #32
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	f043 0220 	orr.w	r2, r3, #32
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e023      	b.n	8001eb0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	0c1b      	lsrs	r3, r3, #16
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d10d      	bne.n	8001e8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	43da      	mvns	r2, r3
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	bf0c      	ite	eq
 8001e84:	2301      	moveq	r3, #1
 8001e86:	2300      	movne	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	e00c      	b.n	8001ea8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	43da      	mvns	r2, r3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	bf0c      	ite	eq
 8001ea0:	2301      	moveq	r3, #1
 8001ea2:	2300      	movne	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d093      	beq.n	8001dd6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ec6:	e071      	b.n	8001fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed6:	d123      	bne.n	8001f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ee6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ef0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	f043 0204 	orr.w	r2, r3, #4
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e067      	b.n	8001ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f26:	d041      	beq.n	8001fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f28:	f7fe fede 	bl	8000ce8 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d302      	bcc.n	8001f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d136      	bne.n	8001fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	0c1b      	lsrs	r3, r3, #16
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d10c      	bne.n	8001f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4013      	ands	r3, r2
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	bf14      	ite	ne
 8001f5a:	2301      	movne	r3, #1
 8001f5c:	2300      	moveq	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	e00b      	b.n	8001f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	43da      	mvns	r2, r3
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bf14      	ite	ne
 8001f74:	2301      	movne	r3, #1
 8001f76:	2300      	moveq	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d016      	beq.n	8001fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2220      	movs	r2, #32
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f043 0220 	orr.w	r2, r3, #32
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e021      	b.n	8001ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	0c1b      	lsrs	r3, r3, #16
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d10c      	bne.n	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	43da      	mvns	r2, r3
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf14      	ite	ne
 8001fc8:	2301      	movne	r3, #1
 8001fca:	2300      	moveq	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	e00b      	b.n	8001fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	bf14      	ite	ne
 8001fe2:	2301      	movne	r3, #1
 8001fe4:	2300      	moveq	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f47f af6d 	bne.w	8001ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002004:	e034      	b.n	8002070 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 f8e3 	bl	80021d2 <I2C_IsAcknowledgeFailed>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e034      	b.n	8002080 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201c:	d028      	beq.n	8002070 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800201e:	f7fe fe63 	bl	8000ce8 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	429a      	cmp	r2, r3
 800202c:	d302      	bcc.n	8002034 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d11d      	bne.n	8002070 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203e:	2b80      	cmp	r3, #128	; 0x80
 8002040:	d016      	beq.n	8002070 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2220      	movs	r2, #32
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	f043 0220 	orr.w	r2, r3, #32
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e007      	b.n	8002080 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207a:	2b80      	cmp	r3, #128	; 0x80
 800207c:	d1c3      	bne.n	8002006 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002094:	e034      	b.n	8002100 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f89b 	bl	80021d2 <I2C_IsAcknowledgeFailed>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e034      	b.n	8002110 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ac:	d028      	beq.n	8002100 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ae:	f7fe fe1b 	bl	8000ce8 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d302      	bcc.n	80020c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d11d      	bne.n	8002100 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d016      	beq.n	8002100 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2220      	movs	r2, #32
 80020dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f043 0220 	orr.w	r2, r3, #32
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e007      	b.n	8002110 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b04      	cmp	r3, #4
 800210c:	d1c3      	bne.n	8002096 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002124:	e049      	b.n	80021ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b10      	cmp	r3, #16
 8002132:	d119      	bne.n	8002168 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f06f 0210 	mvn.w	r2, #16
 800213c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e030      	b.n	80021ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002168:	f7fe fdbe 	bl	8000ce8 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	429a      	cmp	r2, r3
 8002176:	d302      	bcc.n	800217e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d11d      	bne.n	80021ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002188:	2b40      	cmp	r3, #64	; 0x40
 800218a:	d016      	beq.n	80021ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2220      	movs	r2, #32
 8002196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f043 0220 	orr.w	r2, r3, #32
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e007      	b.n	80021ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c4:	2b40      	cmp	r3, #64	; 0x40
 80021c6:	d1ae      	bne.n	8002126 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e8:	d11b      	bne.n	8002222 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021f2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2220      	movs	r2, #32
 80021fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f043 0204 	orr.w	r2, r3, #4
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e267      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d075      	beq.n	800233a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800224e:	4b88      	ldr	r3, [pc, #544]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b04      	cmp	r3, #4
 8002258:	d00c      	beq.n	8002274 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800225a:	4b85      	ldr	r3, [pc, #532]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002262:	2b08      	cmp	r3, #8
 8002264:	d112      	bne.n	800228c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002266:	4b82      	ldr	r3, [pc, #520]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800226e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002272:	d10b      	bne.n	800228c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002274:	4b7e      	ldr	r3, [pc, #504]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d05b      	beq.n	8002338 <HAL_RCC_OscConfig+0x108>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d157      	bne.n	8002338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e242      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002294:	d106      	bne.n	80022a4 <HAL_RCC_OscConfig+0x74>
 8002296:	4b76      	ldr	r3, [pc, #472]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a75      	ldr	r2, [pc, #468]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 800229c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	e01d      	b.n	80022e0 <HAL_RCC_OscConfig+0xb0>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x98>
 80022ae:	4b70      	ldr	r3, [pc, #448]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a6f      	ldr	r2, [pc, #444]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80022b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	4b6d      	ldr	r3, [pc, #436]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a6c      	ldr	r2, [pc, #432]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e00b      	b.n	80022e0 <HAL_RCC_OscConfig+0xb0>
 80022c8:	4b69      	ldr	r3, [pc, #420]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a68      	ldr	r2, [pc, #416]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80022ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b66      	ldr	r3, [pc, #408]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a65      	ldr	r2, [pc, #404]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80022da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d013      	beq.n	8002310 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7fe fcfe 	bl	8000ce8 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f0:	f7fe fcfa 	bl	8000ce8 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	; 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e207      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002302:	4b5b      	ldr	r3, [pc, #364]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0xc0>
 800230e:	e014      	b.n	800233a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7fe fcea 	bl	8000ce8 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002318:	f7fe fce6 	bl	8000ce8 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	; 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e1f3      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232a:	4b51      	ldr	r3, [pc, #324]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0xe8>
 8002336:	e000      	b.n	800233a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d063      	beq.n	800240e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002346:	4b4a      	ldr	r3, [pc, #296]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00b      	beq.n	800236a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002352:	4b47      	ldr	r3, [pc, #284]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800235a:	2b08      	cmp	r3, #8
 800235c:	d11c      	bne.n	8002398 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800235e:	4b44      	ldr	r3, [pc, #272]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d116      	bne.n	8002398 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236a:	4b41      	ldr	r3, [pc, #260]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_RCC_OscConfig+0x152>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d001      	beq.n	8002382 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e1c7      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002382:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4937      	ldr	r1, [pc, #220]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002396:	e03a      	b.n	800240e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d020      	beq.n	80023e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a0:	4b34      	ldr	r3, [pc, #208]	; (8002474 <HAL_RCC_OscConfig+0x244>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a6:	f7fe fc9f 	bl	8000ce8 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ae:	f7fe fc9b 	bl	8000ce8 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e1a8      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c0:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023cc:	4b28      	ldr	r3, [pc, #160]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4925      	ldr	r1, [pc, #148]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	600b      	str	r3, [r1, #0]
 80023e0:	e015      	b.n	800240e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e2:	4b24      	ldr	r3, [pc, #144]	; (8002474 <HAL_RCC_OscConfig+0x244>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7fe fc7e 	bl	8000ce8 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023f0:	f7fe fc7a 	bl	8000ce8 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e187      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002402:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d036      	beq.n	8002488 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d016      	beq.n	8002450 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <HAL_RCC_OscConfig+0x248>)
 8002424:	2201      	movs	r2, #1
 8002426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002428:	f7fe fc5e 	bl	8000ce8 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002430:	f7fe fc5a 	bl	8000ce8 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e167      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0x200>
 800244e:	e01b      	b.n	8002488 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002450:	4b09      	ldr	r3, [pc, #36]	; (8002478 <HAL_RCC_OscConfig+0x248>)
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002456:	f7fe fc47 	bl	8000ce8 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800245c:	e00e      	b.n	800247c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800245e:	f7fe fc43 	bl	8000ce8 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d907      	bls.n	800247c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e150      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
 8002470:	40023800 	.word	0x40023800
 8002474:	42470000 	.word	0x42470000
 8002478:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247c:	4b88      	ldr	r3, [pc, #544]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 800247e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1ea      	bne.n	800245e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 8097 	beq.w	80025c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800249a:	4b81      	ldr	r3, [pc, #516]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10f      	bne.n	80024c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	4b7d      	ldr	r3, [pc, #500]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	4a7c      	ldr	r2, [pc, #496]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 80024b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b4:	6413      	str	r3, [r2, #64]	; 0x40
 80024b6:	4b7a      	ldr	r3, [pc, #488]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c2:	2301      	movs	r3, #1
 80024c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c6:	4b77      	ldr	r3, [pc, #476]	; (80026a4 <HAL_RCC_OscConfig+0x474>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d118      	bne.n	8002504 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024d2:	4b74      	ldr	r3, [pc, #464]	; (80026a4 <HAL_RCC_OscConfig+0x474>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a73      	ldr	r2, [pc, #460]	; (80026a4 <HAL_RCC_OscConfig+0x474>)
 80024d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024de:	f7fe fc03 	bl	8000ce8 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e6:	f7fe fbff 	bl	8000ce8 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e10c      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f8:	4b6a      	ldr	r3, [pc, #424]	; (80026a4 <HAL_RCC_OscConfig+0x474>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d106      	bne.n	800251a <HAL_RCC_OscConfig+0x2ea>
 800250c:	4b64      	ldr	r3, [pc, #400]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002510:	4a63      	ldr	r2, [pc, #396]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	6713      	str	r3, [r2, #112]	; 0x70
 8002518:	e01c      	b.n	8002554 <HAL_RCC_OscConfig+0x324>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b05      	cmp	r3, #5
 8002520:	d10c      	bne.n	800253c <HAL_RCC_OscConfig+0x30c>
 8002522:	4b5f      	ldr	r3, [pc, #380]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002526:	4a5e      	ldr	r2, [pc, #376]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	6713      	str	r3, [r2, #112]	; 0x70
 800252e:	4b5c      	ldr	r3, [pc, #368]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002532:	4a5b      	ldr	r2, [pc, #364]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6713      	str	r3, [r2, #112]	; 0x70
 800253a:	e00b      	b.n	8002554 <HAL_RCC_OscConfig+0x324>
 800253c:	4b58      	ldr	r3, [pc, #352]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 800253e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002540:	4a57      	ldr	r2, [pc, #348]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002542:	f023 0301 	bic.w	r3, r3, #1
 8002546:	6713      	str	r3, [r2, #112]	; 0x70
 8002548:	4b55      	ldr	r3, [pc, #340]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 800254a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254c:	4a54      	ldr	r2, [pc, #336]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 800254e:	f023 0304 	bic.w	r3, r3, #4
 8002552:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d015      	beq.n	8002588 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255c:	f7fe fbc4 	bl	8000ce8 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002562:	e00a      	b.n	800257a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002564:	f7fe fbc0 	bl	8000ce8 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e0cb      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257a:	4b49      	ldr	r3, [pc, #292]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 800257c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0ee      	beq.n	8002564 <HAL_RCC_OscConfig+0x334>
 8002586:	e014      	b.n	80025b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002588:	f7fe fbae 	bl	8000ce8 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800258e:	e00a      	b.n	80025a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002590:	f7fe fbaa 	bl	8000ce8 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f241 3288 	movw	r2, #5000	; 0x1388
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e0b5      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a6:	4b3e      	ldr	r3, [pc, #248]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1ee      	bne.n	8002590 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025b2:	7dfb      	ldrb	r3, [r7, #23]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d105      	bne.n	80025c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b8:	4b39      	ldr	r3, [pc, #228]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	4a38      	ldr	r2, [pc, #224]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 80025be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80a1 	beq.w	8002710 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025ce:	4b34      	ldr	r3, [pc, #208]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d05c      	beq.n	8002694 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d141      	bne.n	8002666 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e2:	4b31      	ldr	r3, [pc, #196]	; (80026a8 <HAL_RCC_OscConfig+0x478>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7fe fb7e 	bl	8000ce8 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f0:	f7fe fb7a 	bl	8000ce8 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e087      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002602:	4b27      	ldr	r3, [pc, #156]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69da      	ldr	r2, [r3, #28]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	019b      	lsls	r3, r3, #6
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	3b01      	subs	r3, #1
 8002628:	041b      	lsls	r3, r3, #16
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	061b      	lsls	r3, r3, #24
 8002632:	491b      	ldr	r1, [pc, #108]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002634:	4313      	orrs	r3, r2
 8002636:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002638:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <HAL_RCC_OscConfig+0x478>)
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263e:	f7fe fb53 	bl	8000ce8 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002646:	f7fe fb4f 	bl	8000ce8 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e05c      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x416>
 8002664:	e054      	b.n	8002710 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <HAL_RCC_OscConfig+0x478>)
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266c:	f7fe fb3c 	bl	8000ce8 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002674:	f7fe fb38 	bl	8000ce8 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e045      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x444>
 8002692:	e03d      	b.n	8002710 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d107      	bne.n	80026ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e038      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40007000 	.word	0x40007000
 80026a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026ac:	4b1b      	ldr	r3, [pc, #108]	; (800271c <HAL_RCC_OscConfig+0x4ec>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d028      	beq.n	800270c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d121      	bne.n	800270c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d11a      	bne.n	800270c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026dc:	4013      	ands	r3, r2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d111      	bne.n	800270c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f2:	085b      	lsrs	r3, r3, #1
 80026f4:	3b01      	subs	r3, #1
 80026f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d107      	bne.n	800270c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002706:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800

08002720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0cc      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002734:	4b68      	ldr	r3, [pc, #416]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d90c      	bls.n	800275c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b65      	ldr	r3, [pc, #404]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800274a:	4b63      	ldr	r3, [pc, #396]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d001      	beq.n	800275c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0b8      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d020      	beq.n	80027aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002774:	4b59      	ldr	r3, [pc, #356]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	4a58      	ldr	r2, [pc, #352]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800277e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800278c:	4b53      	ldr	r3, [pc, #332]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	4a52      	ldr	r2, [pc, #328]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002798:	4b50      	ldr	r3, [pc, #320]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	494d      	ldr	r1, [pc, #308]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d044      	beq.n	8002840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d107      	bne.n	80027ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027be:	4b47      	ldr	r3, [pc, #284]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d119      	bne.n	80027fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e07f      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d003      	beq.n	80027de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d107      	bne.n	80027ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027de:	4b3f      	ldr	r3, [pc, #252]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e06f      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ee:	4b3b      	ldr	r3, [pc, #236]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e067      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fe:	4b37      	ldr	r3, [pc, #220]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f023 0203 	bic.w	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4934      	ldr	r1, [pc, #208]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 800280c:	4313      	orrs	r3, r2
 800280e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002810:	f7fe fa6a 	bl	8000ce8 <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002816:	e00a      	b.n	800282e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002818:	f7fe fa66 	bl	8000ce8 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	f241 3288 	movw	r2, #5000	; 0x1388
 8002826:	4293      	cmp	r3, r2
 8002828:	d901      	bls.n	800282e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e04f      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	4b2b      	ldr	r3, [pc, #172]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 020c 	and.w	r2, r3, #12
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	429a      	cmp	r2, r3
 800283e:	d1eb      	bne.n	8002818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002840:	4b25      	ldr	r3, [pc, #148]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d20c      	bcs.n	8002868 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284e:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002856:	4b20      	ldr	r3, [pc, #128]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d001      	beq.n	8002868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e032      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002874:	4b19      	ldr	r3, [pc, #100]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4916      	ldr	r1, [pc, #88]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	4313      	orrs	r3, r2
 8002884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d009      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002892:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	490e      	ldr	r1, [pc, #56]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028a6:	f000 f821 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 80028aa:	4602      	mov	r2, r0
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	490a      	ldr	r1, [pc, #40]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	5ccb      	ldrb	r3, [r1, r3]
 80028ba:	fa22 f303 	lsr.w	r3, r2, r3
 80028be:	4a09      	ldr	r2, [pc, #36]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe f9ca 	bl	8000c60 <HAL_InitTick>

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40023c00 	.word	0x40023c00
 80028dc:	40023800 	.word	0x40023800
 80028e0:	08003974 	.word	0x08003974
 80028e4:	20000000 	.word	0x20000000
 80028e8:	20000004 	.word	0x20000004

080028ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028f0:	b090      	sub	sp, #64	; 0x40
 80028f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	637b      	str	r3, [r7, #52]	; 0x34
 80028f8:	2300      	movs	r3, #0
 80028fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028fc:	2300      	movs	r3, #0
 80028fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002904:	4b59      	ldr	r3, [pc, #356]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b08      	cmp	r3, #8
 800290e:	d00d      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0x40>
 8002910:	2b08      	cmp	r3, #8
 8002912:	f200 80a1 	bhi.w	8002a58 <HAL_RCC_GetSysClockFreq+0x16c>
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <HAL_RCC_GetSysClockFreq+0x34>
 800291a:	2b04      	cmp	r3, #4
 800291c:	d003      	beq.n	8002926 <HAL_RCC_GetSysClockFreq+0x3a>
 800291e:	e09b      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002920:	4b53      	ldr	r3, [pc, #332]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x184>)
 8002922:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002924:	e09b      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002926:	4b53      	ldr	r3, [pc, #332]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8002928:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800292a:	e098      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800292c:	4b4f      	ldr	r3, [pc, #316]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x180>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002934:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002936:	4b4d      	ldr	r3, [pc, #308]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d028      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002942:	4b4a      	ldr	r3, [pc, #296]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	099b      	lsrs	r3, r3, #6
 8002948:	2200      	movs	r2, #0
 800294a:	623b      	str	r3, [r7, #32]
 800294c:	627a      	str	r2, [r7, #36]	; 0x24
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002954:	2100      	movs	r1, #0
 8002956:	4b47      	ldr	r3, [pc, #284]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8002958:	fb03 f201 	mul.w	r2, r3, r1
 800295c:	2300      	movs	r3, #0
 800295e:	fb00 f303 	mul.w	r3, r0, r3
 8002962:	4413      	add	r3, r2
 8002964:	4a43      	ldr	r2, [pc, #268]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8002966:	fba0 1202 	umull	r1, r2, r0, r2
 800296a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800296c:	460a      	mov	r2, r1
 800296e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002972:	4413      	add	r3, r2
 8002974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002978:	2200      	movs	r2, #0
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	61fa      	str	r2, [r7, #28]
 800297e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002982:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002986:	f7fd fc7b 	bl	8000280 <__aeabi_uldivmod>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4613      	mov	r3, r2
 8002990:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002992:	e053      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002994:	4b35      	ldr	r3, [pc, #212]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	099b      	lsrs	r3, r3, #6
 800299a:	2200      	movs	r2, #0
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	617a      	str	r2, [r7, #20]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029a6:	f04f 0b00 	mov.w	fp, #0
 80029aa:	4652      	mov	r2, sl
 80029ac:	465b      	mov	r3, fp
 80029ae:	f04f 0000 	mov.w	r0, #0
 80029b2:	f04f 0100 	mov.w	r1, #0
 80029b6:	0159      	lsls	r1, r3, #5
 80029b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029bc:	0150      	lsls	r0, r2, #5
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	ebb2 080a 	subs.w	r8, r2, sl
 80029c6:	eb63 090b 	sbc.w	r9, r3, fp
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029de:	ebb2 0408 	subs.w	r4, r2, r8
 80029e2:	eb63 0509 	sbc.w	r5, r3, r9
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	00eb      	lsls	r3, r5, #3
 80029f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029f4:	00e2      	lsls	r2, r4, #3
 80029f6:	4614      	mov	r4, r2
 80029f8:	461d      	mov	r5, r3
 80029fa:	eb14 030a 	adds.w	r3, r4, sl
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	eb45 030b 	adc.w	r3, r5, fp
 8002a04:	607b      	str	r3, [r7, #4]
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a12:	4629      	mov	r1, r5
 8002a14:	028b      	lsls	r3, r1, #10
 8002a16:	4621      	mov	r1, r4
 8002a18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a1c:	4621      	mov	r1, r4
 8002a1e:	028a      	lsls	r2, r1, #10
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a26:	2200      	movs	r2, #0
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	60fa      	str	r2, [r7, #12]
 8002a2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a30:	f7fd fc26 	bl	8000280 <__aeabi_uldivmod>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4613      	mov	r3, r2
 8002a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	0c1b      	lsrs	r3, r3, #16
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	3301      	adds	r3, #1
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002a4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a56:	e002      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3740      	adds	r7, #64	; 0x40
 8002a64:	46bd      	mov	sp, r7
 8002a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	00f42400 	.word	0x00f42400
 8002a74:	017d7840 	.word	0x017d7840

08002a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a7c:	4b03      	ldr	r3, [pc, #12]	; (8002a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	20000000 	.word	0x20000000

08002a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a94:	f7ff fff0 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	0a9b      	lsrs	r3, r3, #10
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	4903      	ldr	r1, [pc, #12]	; (8002ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa6:	5ccb      	ldrb	r3, [r1, r3]
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	08003984 	.word	0x08003984

08002ab8 <malloc>:
 8002ab8:	4b02      	ldr	r3, [pc, #8]	; (8002ac4 <malloc+0xc>)
 8002aba:	4601      	mov	r1, r0
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	f000 b823 	b.w	8002b08 <_malloc_r>
 8002ac2:	bf00      	nop
 8002ac4:	20000064 	.word	0x20000064

08002ac8 <sbrk_aligned>:
 8002ac8:	b570      	push	{r4, r5, r6, lr}
 8002aca:	4e0e      	ldr	r6, [pc, #56]	; (8002b04 <sbrk_aligned+0x3c>)
 8002acc:	460c      	mov	r4, r1
 8002ace:	6831      	ldr	r1, [r6, #0]
 8002ad0:	4605      	mov	r5, r0
 8002ad2:	b911      	cbnz	r1, 8002ada <sbrk_aligned+0x12>
 8002ad4:	f000 f9f8 	bl	8002ec8 <_sbrk_r>
 8002ad8:	6030      	str	r0, [r6, #0]
 8002ada:	4621      	mov	r1, r4
 8002adc:	4628      	mov	r0, r5
 8002ade:	f000 f9f3 	bl	8002ec8 <_sbrk_r>
 8002ae2:	1c43      	adds	r3, r0, #1
 8002ae4:	d00a      	beq.n	8002afc <sbrk_aligned+0x34>
 8002ae6:	1cc4      	adds	r4, r0, #3
 8002ae8:	f024 0403 	bic.w	r4, r4, #3
 8002aec:	42a0      	cmp	r0, r4
 8002aee:	d007      	beq.n	8002b00 <sbrk_aligned+0x38>
 8002af0:	1a21      	subs	r1, r4, r0
 8002af2:	4628      	mov	r0, r5
 8002af4:	f000 f9e8 	bl	8002ec8 <_sbrk_r>
 8002af8:	3001      	adds	r0, #1
 8002afa:	d101      	bne.n	8002b00 <sbrk_aligned+0x38>
 8002afc:	f04f 34ff 	mov.w	r4, #4294967295
 8002b00:	4620      	mov	r0, r4
 8002b02:	bd70      	pop	{r4, r5, r6, pc}
 8002b04:	200000e4 	.word	0x200000e4

08002b08 <_malloc_r>:
 8002b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b0c:	1ccd      	adds	r5, r1, #3
 8002b0e:	f025 0503 	bic.w	r5, r5, #3
 8002b12:	3508      	adds	r5, #8
 8002b14:	2d0c      	cmp	r5, #12
 8002b16:	bf38      	it	cc
 8002b18:	250c      	movcc	r5, #12
 8002b1a:	2d00      	cmp	r5, #0
 8002b1c:	4607      	mov	r7, r0
 8002b1e:	db01      	blt.n	8002b24 <_malloc_r+0x1c>
 8002b20:	42a9      	cmp	r1, r5
 8002b22:	d905      	bls.n	8002b30 <_malloc_r+0x28>
 8002b24:	230c      	movs	r3, #12
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	2600      	movs	r6, #0
 8002b2a:	4630      	mov	r0, r6
 8002b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002c04 <_malloc_r+0xfc>
 8002b34:	f000 f868 	bl	8002c08 <__malloc_lock>
 8002b38:	f8d8 3000 	ldr.w	r3, [r8]
 8002b3c:	461c      	mov	r4, r3
 8002b3e:	bb5c      	cbnz	r4, 8002b98 <_malloc_r+0x90>
 8002b40:	4629      	mov	r1, r5
 8002b42:	4638      	mov	r0, r7
 8002b44:	f7ff ffc0 	bl	8002ac8 <sbrk_aligned>
 8002b48:	1c43      	adds	r3, r0, #1
 8002b4a:	4604      	mov	r4, r0
 8002b4c:	d155      	bne.n	8002bfa <_malloc_r+0xf2>
 8002b4e:	f8d8 4000 	ldr.w	r4, [r8]
 8002b52:	4626      	mov	r6, r4
 8002b54:	2e00      	cmp	r6, #0
 8002b56:	d145      	bne.n	8002be4 <_malloc_r+0xdc>
 8002b58:	2c00      	cmp	r4, #0
 8002b5a:	d048      	beq.n	8002bee <_malloc_r+0xe6>
 8002b5c:	6823      	ldr	r3, [r4, #0]
 8002b5e:	4631      	mov	r1, r6
 8002b60:	4638      	mov	r0, r7
 8002b62:	eb04 0903 	add.w	r9, r4, r3
 8002b66:	f000 f9af 	bl	8002ec8 <_sbrk_r>
 8002b6a:	4581      	cmp	r9, r0
 8002b6c:	d13f      	bne.n	8002bee <_malloc_r+0xe6>
 8002b6e:	6821      	ldr	r1, [r4, #0]
 8002b70:	1a6d      	subs	r5, r5, r1
 8002b72:	4629      	mov	r1, r5
 8002b74:	4638      	mov	r0, r7
 8002b76:	f7ff ffa7 	bl	8002ac8 <sbrk_aligned>
 8002b7a:	3001      	adds	r0, #1
 8002b7c:	d037      	beq.n	8002bee <_malloc_r+0xe6>
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	442b      	add	r3, r5
 8002b82:	6023      	str	r3, [r4, #0]
 8002b84:	f8d8 3000 	ldr.w	r3, [r8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d038      	beq.n	8002bfe <_malloc_r+0xf6>
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	42a2      	cmp	r2, r4
 8002b90:	d12b      	bne.n	8002bea <_malloc_r+0xe2>
 8002b92:	2200      	movs	r2, #0
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	e00f      	b.n	8002bb8 <_malloc_r+0xb0>
 8002b98:	6822      	ldr	r2, [r4, #0]
 8002b9a:	1b52      	subs	r2, r2, r5
 8002b9c:	d41f      	bmi.n	8002bde <_malloc_r+0xd6>
 8002b9e:	2a0b      	cmp	r2, #11
 8002ba0:	d917      	bls.n	8002bd2 <_malloc_r+0xca>
 8002ba2:	1961      	adds	r1, r4, r5
 8002ba4:	42a3      	cmp	r3, r4
 8002ba6:	6025      	str	r5, [r4, #0]
 8002ba8:	bf18      	it	ne
 8002baa:	6059      	strne	r1, [r3, #4]
 8002bac:	6863      	ldr	r3, [r4, #4]
 8002bae:	bf08      	it	eq
 8002bb0:	f8c8 1000 	streq.w	r1, [r8]
 8002bb4:	5162      	str	r2, [r4, r5]
 8002bb6:	604b      	str	r3, [r1, #4]
 8002bb8:	4638      	mov	r0, r7
 8002bba:	f104 060b 	add.w	r6, r4, #11
 8002bbe:	f000 f829 	bl	8002c14 <__malloc_unlock>
 8002bc2:	f026 0607 	bic.w	r6, r6, #7
 8002bc6:	1d23      	adds	r3, r4, #4
 8002bc8:	1af2      	subs	r2, r6, r3
 8002bca:	d0ae      	beq.n	8002b2a <_malloc_r+0x22>
 8002bcc:	1b9b      	subs	r3, r3, r6
 8002bce:	50a3      	str	r3, [r4, r2]
 8002bd0:	e7ab      	b.n	8002b2a <_malloc_r+0x22>
 8002bd2:	42a3      	cmp	r3, r4
 8002bd4:	6862      	ldr	r2, [r4, #4]
 8002bd6:	d1dd      	bne.n	8002b94 <_malloc_r+0x8c>
 8002bd8:	f8c8 2000 	str.w	r2, [r8]
 8002bdc:	e7ec      	b.n	8002bb8 <_malloc_r+0xb0>
 8002bde:	4623      	mov	r3, r4
 8002be0:	6864      	ldr	r4, [r4, #4]
 8002be2:	e7ac      	b.n	8002b3e <_malloc_r+0x36>
 8002be4:	4634      	mov	r4, r6
 8002be6:	6876      	ldr	r6, [r6, #4]
 8002be8:	e7b4      	b.n	8002b54 <_malloc_r+0x4c>
 8002bea:	4613      	mov	r3, r2
 8002bec:	e7cc      	b.n	8002b88 <_malloc_r+0x80>
 8002bee:	230c      	movs	r3, #12
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	4638      	mov	r0, r7
 8002bf4:	f000 f80e 	bl	8002c14 <__malloc_unlock>
 8002bf8:	e797      	b.n	8002b2a <_malloc_r+0x22>
 8002bfa:	6025      	str	r5, [r4, #0]
 8002bfc:	e7dc      	b.n	8002bb8 <_malloc_r+0xb0>
 8002bfe:	605b      	str	r3, [r3, #4]
 8002c00:	deff      	udf	#255	; 0xff
 8002c02:	bf00      	nop
 8002c04:	200000e0 	.word	0x200000e0

08002c08 <__malloc_lock>:
 8002c08:	4801      	ldr	r0, [pc, #4]	; (8002c10 <__malloc_lock+0x8>)
 8002c0a:	f000 b9aa 	b.w	8002f62 <__retarget_lock_acquire_recursive>
 8002c0e:	bf00      	nop
 8002c10:	20000228 	.word	0x20000228

08002c14 <__malloc_unlock>:
 8002c14:	4801      	ldr	r0, [pc, #4]	; (8002c1c <__malloc_unlock+0x8>)
 8002c16:	f000 b9a5 	b.w	8002f64 <__retarget_lock_release_recursive>
 8002c1a:	bf00      	nop
 8002c1c:	20000228 	.word	0x20000228

08002c20 <std>:
 8002c20:	2300      	movs	r3, #0
 8002c22:	b510      	push	{r4, lr}
 8002c24:	4604      	mov	r4, r0
 8002c26:	e9c0 3300 	strd	r3, r3, [r0]
 8002c2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c2e:	6083      	str	r3, [r0, #8]
 8002c30:	8181      	strh	r1, [r0, #12]
 8002c32:	6643      	str	r3, [r0, #100]	; 0x64
 8002c34:	81c2      	strh	r2, [r0, #14]
 8002c36:	6183      	str	r3, [r0, #24]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	2208      	movs	r2, #8
 8002c3c:	305c      	adds	r0, #92	; 0x5c
 8002c3e:	f000 f906 	bl	8002e4e <memset>
 8002c42:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <std+0x58>)
 8002c44:	6263      	str	r3, [r4, #36]	; 0x24
 8002c46:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <std+0x5c>)
 8002c48:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <std+0x60>)
 8002c4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c4e:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <std+0x64>)
 8002c50:	6323      	str	r3, [r4, #48]	; 0x30
 8002c52:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <std+0x68>)
 8002c54:	6224      	str	r4, [r4, #32]
 8002c56:	429c      	cmp	r4, r3
 8002c58:	d006      	beq.n	8002c68 <std+0x48>
 8002c5a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002c5e:	4294      	cmp	r4, r2
 8002c60:	d002      	beq.n	8002c68 <std+0x48>
 8002c62:	33d0      	adds	r3, #208	; 0xd0
 8002c64:	429c      	cmp	r4, r3
 8002c66:	d105      	bne.n	8002c74 <std+0x54>
 8002c68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c70:	f000 b976 	b.w	8002f60 <__retarget_lock_init_recursive>
 8002c74:	bd10      	pop	{r4, pc}
 8002c76:	bf00      	nop
 8002c78:	08002dc9 	.word	0x08002dc9
 8002c7c:	08002deb 	.word	0x08002deb
 8002c80:	08002e23 	.word	0x08002e23
 8002c84:	08002e47 	.word	0x08002e47
 8002c88:	200000e8 	.word	0x200000e8

08002c8c <stdio_exit_handler>:
 8002c8c:	4a02      	ldr	r2, [pc, #8]	; (8002c98 <stdio_exit_handler+0xc>)
 8002c8e:	4903      	ldr	r1, [pc, #12]	; (8002c9c <stdio_exit_handler+0x10>)
 8002c90:	4803      	ldr	r0, [pc, #12]	; (8002ca0 <stdio_exit_handler+0x14>)
 8002c92:	f000 b869 	b.w	8002d68 <_fwalk_sglue>
 8002c96:	bf00      	nop
 8002c98:	2000000c 	.word	0x2000000c
 8002c9c:	080036d1 	.word	0x080036d1
 8002ca0:	20000018 	.word	0x20000018

08002ca4 <cleanup_stdio>:
 8002ca4:	6841      	ldr	r1, [r0, #4]
 8002ca6:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <cleanup_stdio+0x34>)
 8002ca8:	4299      	cmp	r1, r3
 8002caa:	b510      	push	{r4, lr}
 8002cac:	4604      	mov	r4, r0
 8002cae:	d001      	beq.n	8002cb4 <cleanup_stdio+0x10>
 8002cb0:	f000 fd0e 	bl	80036d0 <_fflush_r>
 8002cb4:	68a1      	ldr	r1, [r4, #8]
 8002cb6:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <cleanup_stdio+0x38>)
 8002cb8:	4299      	cmp	r1, r3
 8002cba:	d002      	beq.n	8002cc2 <cleanup_stdio+0x1e>
 8002cbc:	4620      	mov	r0, r4
 8002cbe:	f000 fd07 	bl	80036d0 <_fflush_r>
 8002cc2:	68e1      	ldr	r1, [r4, #12]
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <cleanup_stdio+0x3c>)
 8002cc6:	4299      	cmp	r1, r3
 8002cc8:	d004      	beq.n	8002cd4 <cleanup_stdio+0x30>
 8002cca:	4620      	mov	r0, r4
 8002ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cd0:	f000 bcfe 	b.w	80036d0 <_fflush_r>
 8002cd4:	bd10      	pop	{r4, pc}
 8002cd6:	bf00      	nop
 8002cd8:	200000e8 	.word	0x200000e8
 8002cdc:	20000150 	.word	0x20000150
 8002ce0:	200001b8 	.word	0x200001b8

08002ce4 <global_stdio_init.part.0>:
 8002ce4:	b510      	push	{r4, lr}
 8002ce6:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <global_stdio_init.part.0+0x30>)
 8002ce8:	4c0b      	ldr	r4, [pc, #44]	; (8002d18 <global_stdio_init.part.0+0x34>)
 8002cea:	4a0c      	ldr	r2, [pc, #48]	; (8002d1c <global_stdio_init.part.0+0x38>)
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	4620      	mov	r0, r4
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2104      	movs	r1, #4
 8002cf4:	f7ff ff94 	bl	8002c20 <std>
 8002cf8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	2109      	movs	r1, #9
 8002d00:	f7ff ff8e 	bl	8002c20 <std>
 8002d04:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002d08:	2202      	movs	r2, #2
 8002d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d0e:	2112      	movs	r1, #18
 8002d10:	f7ff bf86 	b.w	8002c20 <std>
 8002d14:	20000220 	.word	0x20000220
 8002d18:	200000e8 	.word	0x200000e8
 8002d1c:	08002c8d 	.word	0x08002c8d

08002d20 <__sfp_lock_acquire>:
 8002d20:	4801      	ldr	r0, [pc, #4]	; (8002d28 <__sfp_lock_acquire+0x8>)
 8002d22:	f000 b91e 	b.w	8002f62 <__retarget_lock_acquire_recursive>
 8002d26:	bf00      	nop
 8002d28:	20000229 	.word	0x20000229

08002d2c <__sfp_lock_release>:
 8002d2c:	4801      	ldr	r0, [pc, #4]	; (8002d34 <__sfp_lock_release+0x8>)
 8002d2e:	f000 b919 	b.w	8002f64 <__retarget_lock_release_recursive>
 8002d32:	bf00      	nop
 8002d34:	20000229 	.word	0x20000229

08002d38 <__sinit>:
 8002d38:	b510      	push	{r4, lr}
 8002d3a:	4604      	mov	r4, r0
 8002d3c:	f7ff fff0 	bl	8002d20 <__sfp_lock_acquire>
 8002d40:	6a23      	ldr	r3, [r4, #32]
 8002d42:	b11b      	cbz	r3, 8002d4c <__sinit+0x14>
 8002d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d48:	f7ff bff0 	b.w	8002d2c <__sfp_lock_release>
 8002d4c:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <__sinit+0x28>)
 8002d4e:	6223      	str	r3, [r4, #32]
 8002d50:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <__sinit+0x2c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f5      	bne.n	8002d44 <__sinit+0xc>
 8002d58:	f7ff ffc4 	bl	8002ce4 <global_stdio_init.part.0>
 8002d5c:	e7f2      	b.n	8002d44 <__sinit+0xc>
 8002d5e:	bf00      	nop
 8002d60:	08002ca5 	.word	0x08002ca5
 8002d64:	20000220 	.word	0x20000220

08002d68 <_fwalk_sglue>:
 8002d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d6c:	4607      	mov	r7, r0
 8002d6e:	4688      	mov	r8, r1
 8002d70:	4614      	mov	r4, r2
 8002d72:	2600      	movs	r6, #0
 8002d74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d78:	f1b9 0901 	subs.w	r9, r9, #1
 8002d7c:	d505      	bpl.n	8002d8a <_fwalk_sglue+0x22>
 8002d7e:	6824      	ldr	r4, [r4, #0]
 8002d80:	2c00      	cmp	r4, #0
 8002d82:	d1f7      	bne.n	8002d74 <_fwalk_sglue+0xc>
 8002d84:	4630      	mov	r0, r6
 8002d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d8a:	89ab      	ldrh	r3, [r5, #12]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d907      	bls.n	8002da0 <_fwalk_sglue+0x38>
 8002d90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d94:	3301      	adds	r3, #1
 8002d96:	d003      	beq.n	8002da0 <_fwalk_sglue+0x38>
 8002d98:	4629      	mov	r1, r5
 8002d9a:	4638      	mov	r0, r7
 8002d9c:	47c0      	blx	r8
 8002d9e:	4306      	orrs	r6, r0
 8002da0:	3568      	adds	r5, #104	; 0x68
 8002da2:	e7e9      	b.n	8002d78 <_fwalk_sglue+0x10>

08002da4 <iprintf>:
 8002da4:	b40f      	push	{r0, r1, r2, r3}
 8002da6:	b507      	push	{r0, r1, r2, lr}
 8002da8:	4906      	ldr	r1, [pc, #24]	; (8002dc4 <iprintf+0x20>)
 8002daa:	ab04      	add	r3, sp, #16
 8002dac:	6808      	ldr	r0, [r1, #0]
 8002dae:	f853 2b04 	ldr.w	r2, [r3], #4
 8002db2:	6881      	ldr	r1, [r0, #8]
 8002db4:	9301      	str	r3, [sp, #4]
 8002db6:	f000 f95b 	bl	8003070 <_vfiprintf_r>
 8002dba:	b003      	add	sp, #12
 8002dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002dc0:	b004      	add	sp, #16
 8002dc2:	4770      	bx	lr
 8002dc4:	20000064 	.word	0x20000064

08002dc8 <__sread>:
 8002dc8:	b510      	push	{r4, lr}
 8002dca:	460c      	mov	r4, r1
 8002dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dd0:	f000 f868 	bl	8002ea4 <_read_r>
 8002dd4:	2800      	cmp	r0, #0
 8002dd6:	bfab      	itete	ge
 8002dd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002dda:	89a3      	ldrhlt	r3, [r4, #12]
 8002ddc:	181b      	addge	r3, r3, r0
 8002dde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002de2:	bfac      	ite	ge
 8002de4:	6563      	strge	r3, [r4, #84]	; 0x54
 8002de6:	81a3      	strhlt	r3, [r4, #12]
 8002de8:	bd10      	pop	{r4, pc}

08002dea <__swrite>:
 8002dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dee:	461f      	mov	r7, r3
 8002df0:	898b      	ldrh	r3, [r1, #12]
 8002df2:	05db      	lsls	r3, r3, #23
 8002df4:	4605      	mov	r5, r0
 8002df6:	460c      	mov	r4, r1
 8002df8:	4616      	mov	r6, r2
 8002dfa:	d505      	bpl.n	8002e08 <__swrite+0x1e>
 8002dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e00:	2302      	movs	r3, #2
 8002e02:	2200      	movs	r2, #0
 8002e04:	f000 f83c 	bl	8002e80 <_lseek_r>
 8002e08:	89a3      	ldrh	r3, [r4, #12]
 8002e0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e12:	81a3      	strh	r3, [r4, #12]
 8002e14:	4632      	mov	r2, r6
 8002e16:	463b      	mov	r3, r7
 8002e18:	4628      	mov	r0, r5
 8002e1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e1e:	f000 b863 	b.w	8002ee8 <_write_r>

08002e22 <__sseek>:
 8002e22:	b510      	push	{r4, lr}
 8002e24:	460c      	mov	r4, r1
 8002e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e2a:	f000 f829 	bl	8002e80 <_lseek_r>
 8002e2e:	1c43      	adds	r3, r0, #1
 8002e30:	89a3      	ldrh	r3, [r4, #12]
 8002e32:	bf15      	itete	ne
 8002e34:	6560      	strne	r0, [r4, #84]	; 0x54
 8002e36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002e3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002e3e:	81a3      	strheq	r3, [r4, #12]
 8002e40:	bf18      	it	ne
 8002e42:	81a3      	strhne	r3, [r4, #12]
 8002e44:	bd10      	pop	{r4, pc}

08002e46 <__sclose>:
 8002e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e4a:	f000 b809 	b.w	8002e60 <_close_r>

08002e4e <memset>:
 8002e4e:	4402      	add	r2, r0
 8002e50:	4603      	mov	r3, r0
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d100      	bne.n	8002e58 <memset+0xa>
 8002e56:	4770      	bx	lr
 8002e58:	f803 1b01 	strb.w	r1, [r3], #1
 8002e5c:	e7f9      	b.n	8002e52 <memset+0x4>
	...

08002e60 <_close_r>:
 8002e60:	b538      	push	{r3, r4, r5, lr}
 8002e62:	4d06      	ldr	r5, [pc, #24]	; (8002e7c <_close_r+0x1c>)
 8002e64:	2300      	movs	r3, #0
 8002e66:	4604      	mov	r4, r0
 8002e68:	4608      	mov	r0, r1
 8002e6a:	602b      	str	r3, [r5, #0]
 8002e6c:	f7fd fd6d 	bl	800094a <_close>
 8002e70:	1c43      	adds	r3, r0, #1
 8002e72:	d102      	bne.n	8002e7a <_close_r+0x1a>
 8002e74:	682b      	ldr	r3, [r5, #0]
 8002e76:	b103      	cbz	r3, 8002e7a <_close_r+0x1a>
 8002e78:	6023      	str	r3, [r4, #0]
 8002e7a:	bd38      	pop	{r3, r4, r5, pc}
 8002e7c:	20000224 	.word	0x20000224

08002e80 <_lseek_r>:
 8002e80:	b538      	push	{r3, r4, r5, lr}
 8002e82:	4d07      	ldr	r5, [pc, #28]	; (8002ea0 <_lseek_r+0x20>)
 8002e84:	4604      	mov	r4, r0
 8002e86:	4608      	mov	r0, r1
 8002e88:	4611      	mov	r1, r2
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	602a      	str	r2, [r5, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f7fd fd82 	bl	8000998 <_lseek>
 8002e94:	1c43      	adds	r3, r0, #1
 8002e96:	d102      	bne.n	8002e9e <_lseek_r+0x1e>
 8002e98:	682b      	ldr	r3, [r5, #0]
 8002e9a:	b103      	cbz	r3, 8002e9e <_lseek_r+0x1e>
 8002e9c:	6023      	str	r3, [r4, #0]
 8002e9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ea0:	20000224 	.word	0x20000224

08002ea4 <_read_r>:
 8002ea4:	b538      	push	{r3, r4, r5, lr}
 8002ea6:	4d07      	ldr	r5, [pc, #28]	; (8002ec4 <_read_r+0x20>)
 8002ea8:	4604      	mov	r4, r0
 8002eaa:	4608      	mov	r0, r1
 8002eac:	4611      	mov	r1, r2
 8002eae:	2200      	movs	r2, #0
 8002eb0:	602a      	str	r2, [r5, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	f7fd fd10 	bl	80008d8 <_read>
 8002eb8:	1c43      	adds	r3, r0, #1
 8002eba:	d102      	bne.n	8002ec2 <_read_r+0x1e>
 8002ebc:	682b      	ldr	r3, [r5, #0]
 8002ebe:	b103      	cbz	r3, 8002ec2 <_read_r+0x1e>
 8002ec0:	6023      	str	r3, [r4, #0]
 8002ec2:	bd38      	pop	{r3, r4, r5, pc}
 8002ec4:	20000224 	.word	0x20000224

08002ec8 <_sbrk_r>:
 8002ec8:	b538      	push	{r3, r4, r5, lr}
 8002eca:	4d06      	ldr	r5, [pc, #24]	; (8002ee4 <_sbrk_r+0x1c>)
 8002ecc:	2300      	movs	r3, #0
 8002ece:	4604      	mov	r4, r0
 8002ed0:	4608      	mov	r0, r1
 8002ed2:	602b      	str	r3, [r5, #0]
 8002ed4:	f7fd fd6e 	bl	80009b4 <_sbrk>
 8002ed8:	1c43      	adds	r3, r0, #1
 8002eda:	d102      	bne.n	8002ee2 <_sbrk_r+0x1a>
 8002edc:	682b      	ldr	r3, [r5, #0]
 8002ede:	b103      	cbz	r3, 8002ee2 <_sbrk_r+0x1a>
 8002ee0:	6023      	str	r3, [r4, #0]
 8002ee2:	bd38      	pop	{r3, r4, r5, pc}
 8002ee4:	20000224 	.word	0x20000224

08002ee8 <_write_r>:
 8002ee8:	b538      	push	{r3, r4, r5, lr}
 8002eea:	4d07      	ldr	r5, [pc, #28]	; (8002f08 <_write_r+0x20>)
 8002eec:	4604      	mov	r4, r0
 8002eee:	4608      	mov	r0, r1
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	602a      	str	r2, [r5, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f7fd fd0b 	bl	8000912 <_write>
 8002efc:	1c43      	adds	r3, r0, #1
 8002efe:	d102      	bne.n	8002f06 <_write_r+0x1e>
 8002f00:	682b      	ldr	r3, [r5, #0]
 8002f02:	b103      	cbz	r3, 8002f06 <_write_r+0x1e>
 8002f04:	6023      	str	r3, [r4, #0]
 8002f06:	bd38      	pop	{r3, r4, r5, pc}
 8002f08:	20000224 	.word	0x20000224

08002f0c <__errno>:
 8002f0c:	4b01      	ldr	r3, [pc, #4]	; (8002f14 <__errno+0x8>)
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	20000064 	.word	0x20000064

08002f18 <__libc_init_array>:
 8002f18:	b570      	push	{r4, r5, r6, lr}
 8002f1a:	4d0d      	ldr	r5, [pc, #52]	; (8002f50 <__libc_init_array+0x38>)
 8002f1c:	4c0d      	ldr	r4, [pc, #52]	; (8002f54 <__libc_init_array+0x3c>)
 8002f1e:	1b64      	subs	r4, r4, r5
 8002f20:	10a4      	asrs	r4, r4, #2
 8002f22:	2600      	movs	r6, #0
 8002f24:	42a6      	cmp	r6, r4
 8002f26:	d109      	bne.n	8002f3c <__libc_init_array+0x24>
 8002f28:	4d0b      	ldr	r5, [pc, #44]	; (8002f58 <__libc_init_array+0x40>)
 8002f2a:	4c0c      	ldr	r4, [pc, #48]	; (8002f5c <__libc_init_array+0x44>)
 8002f2c:	f000 fd12 	bl	8003954 <_init>
 8002f30:	1b64      	subs	r4, r4, r5
 8002f32:	10a4      	asrs	r4, r4, #2
 8002f34:	2600      	movs	r6, #0
 8002f36:	42a6      	cmp	r6, r4
 8002f38:	d105      	bne.n	8002f46 <__libc_init_array+0x2e>
 8002f3a:	bd70      	pop	{r4, r5, r6, pc}
 8002f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f40:	4798      	blx	r3
 8002f42:	3601      	adds	r6, #1
 8002f44:	e7ee      	b.n	8002f24 <__libc_init_array+0xc>
 8002f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f4a:	4798      	blx	r3
 8002f4c:	3601      	adds	r6, #1
 8002f4e:	e7f2      	b.n	8002f36 <__libc_init_array+0x1e>
 8002f50:	080039c8 	.word	0x080039c8
 8002f54:	080039c8 	.word	0x080039c8
 8002f58:	080039c8 	.word	0x080039c8
 8002f5c:	080039cc 	.word	0x080039cc

08002f60 <__retarget_lock_init_recursive>:
 8002f60:	4770      	bx	lr

08002f62 <__retarget_lock_acquire_recursive>:
 8002f62:	4770      	bx	lr

08002f64 <__retarget_lock_release_recursive>:
 8002f64:	4770      	bx	lr

08002f66 <memcpy>:
 8002f66:	440a      	add	r2, r1
 8002f68:	4291      	cmp	r1, r2
 8002f6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f6e:	d100      	bne.n	8002f72 <memcpy+0xc>
 8002f70:	4770      	bx	lr
 8002f72:	b510      	push	{r4, lr}
 8002f74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f7c:	4291      	cmp	r1, r2
 8002f7e:	d1f9      	bne.n	8002f74 <memcpy+0xe>
 8002f80:	bd10      	pop	{r4, pc}
	...

08002f84 <_free_r>:
 8002f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f86:	2900      	cmp	r1, #0
 8002f88:	d044      	beq.n	8003014 <_free_r+0x90>
 8002f8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f8e:	9001      	str	r0, [sp, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f1a1 0404 	sub.w	r4, r1, #4
 8002f96:	bfb8      	it	lt
 8002f98:	18e4      	addlt	r4, r4, r3
 8002f9a:	f7ff fe35 	bl	8002c08 <__malloc_lock>
 8002f9e:	4a1e      	ldr	r2, [pc, #120]	; (8003018 <_free_r+0x94>)
 8002fa0:	9801      	ldr	r0, [sp, #4]
 8002fa2:	6813      	ldr	r3, [r2, #0]
 8002fa4:	b933      	cbnz	r3, 8002fb4 <_free_r+0x30>
 8002fa6:	6063      	str	r3, [r4, #4]
 8002fa8:	6014      	str	r4, [r2, #0]
 8002faa:	b003      	add	sp, #12
 8002fac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002fb0:	f7ff be30 	b.w	8002c14 <__malloc_unlock>
 8002fb4:	42a3      	cmp	r3, r4
 8002fb6:	d908      	bls.n	8002fca <_free_r+0x46>
 8002fb8:	6825      	ldr	r5, [r4, #0]
 8002fba:	1961      	adds	r1, r4, r5
 8002fbc:	428b      	cmp	r3, r1
 8002fbe:	bf01      	itttt	eq
 8002fc0:	6819      	ldreq	r1, [r3, #0]
 8002fc2:	685b      	ldreq	r3, [r3, #4]
 8002fc4:	1949      	addeq	r1, r1, r5
 8002fc6:	6021      	streq	r1, [r4, #0]
 8002fc8:	e7ed      	b.n	8002fa6 <_free_r+0x22>
 8002fca:	461a      	mov	r2, r3
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	b10b      	cbz	r3, 8002fd4 <_free_r+0x50>
 8002fd0:	42a3      	cmp	r3, r4
 8002fd2:	d9fa      	bls.n	8002fca <_free_r+0x46>
 8002fd4:	6811      	ldr	r1, [r2, #0]
 8002fd6:	1855      	adds	r5, r2, r1
 8002fd8:	42a5      	cmp	r5, r4
 8002fda:	d10b      	bne.n	8002ff4 <_free_r+0x70>
 8002fdc:	6824      	ldr	r4, [r4, #0]
 8002fde:	4421      	add	r1, r4
 8002fe0:	1854      	adds	r4, r2, r1
 8002fe2:	42a3      	cmp	r3, r4
 8002fe4:	6011      	str	r1, [r2, #0]
 8002fe6:	d1e0      	bne.n	8002faa <_free_r+0x26>
 8002fe8:	681c      	ldr	r4, [r3, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	6053      	str	r3, [r2, #4]
 8002fee:	440c      	add	r4, r1
 8002ff0:	6014      	str	r4, [r2, #0]
 8002ff2:	e7da      	b.n	8002faa <_free_r+0x26>
 8002ff4:	d902      	bls.n	8002ffc <_free_r+0x78>
 8002ff6:	230c      	movs	r3, #12
 8002ff8:	6003      	str	r3, [r0, #0]
 8002ffa:	e7d6      	b.n	8002faa <_free_r+0x26>
 8002ffc:	6825      	ldr	r5, [r4, #0]
 8002ffe:	1961      	adds	r1, r4, r5
 8003000:	428b      	cmp	r3, r1
 8003002:	bf04      	itt	eq
 8003004:	6819      	ldreq	r1, [r3, #0]
 8003006:	685b      	ldreq	r3, [r3, #4]
 8003008:	6063      	str	r3, [r4, #4]
 800300a:	bf04      	itt	eq
 800300c:	1949      	addeq	r1, r1, r5
 800300e:	6021      	streq	r1, [r4, #0]
 8003010:	6054      	str	r4, [r2, #4]
 8003012:	e7ca      	b.n	8002faa <_free_r+0x26>
 8003014:	b003      	add	sp, #12
 8003016:	bd30      	pop	{r4, r5, pc}
 8003018:	200000e0 	.word	0x200000e0

0800301c <__sfputc_r>:
 800301c:	6893      	ldr	r3, [r2, #8]
 800301e:	3b01      	subs	r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	b410      	push	{r4}
 8003024:	6093      	str	r3, [r2, #8]
 8003026:	da08      	bge.n	800303a <__sfputc_r+0x1e>
 8003028:	6994      	ldr	r4, [r2, #24]
 800302a:	42a3      	cmp	r3, r4
 800302c:	db01      	blt.n	8003032 <__sfputc_r+0x16>
 800302e:	290a      	cmp	r1, #10
 8003030:	d103      	bne.n	800303a <__sfputc_r+0x1e>
 8003032:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003036:	f000 bb73 	b.w	8003720 <__swbuf_r>
 800303a:	6813      	ldr	r3, [r2, #0]
 800303c:	1c58      	adds	r0, r3, #1
 800303e:	6010      	str	r0, [r2, #0]
 8003040:	7019      	strb	r1, [r3, #0]
 8003042:	4608      	mov	r0, r1
 8003044:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003048:	4770      	bx	lr

0800304a <__sfputs_r>:
 800304a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304c:	4606      	mov	r6, r0
 800304e:	460f      	mov	r7, r1
 8003050:	4614      	mov	r4, r2
 8003052:	18d5      	adds	r5, r2, r3
 8003054:	42ac      	cmp	r4, r5
 8003056:	d101      	bne.n	800305c <__sfputs_r+0x12>
 8003058:	2000      	movs	r0, #0
 800305a:	e007      	b.n	800306c <__sfputs_r+0x22>
 800305c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003060:	463a      	mov	r2, r7
 8003062:	4630      	mov	r0, r6
 8003064:	f7ff ffda 	bl	800301c <__sfputc_r>
 8003068:	1c43      	adds	r3, r0, #1
 800306a:	d1f3      	bne.n	8003054 <__sfputs_r+0xa>
 800306c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003070 <_vfiprintf_r>:
 8003070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003074:	460d      	mov	r5, r1
 8003076:	b09d      	sub	sp, #116	; 0x74
 8003078:	4614      	mov	r4, r2
 800307a:	4698      	mov	r8, r3
 800307c:	4606      	mov	r6, r0
 800307e:	b118      	cbz	r0, 8003088 <_vfiprintf_r+0x18>
 8003080:	6a03      	ldr	r3, [r0, #32]
 8003082:	b90b      	cbnz	r3, 8003088 <_vfiprintf_r+0x18>
 8003084:	f7ff fe58 	bl	8002d38 <__sinit>
 8003088:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800308a:	07d9      	lsls	r1, r3, #31
 800308c:	d405      	bmi.n	800309a <_vfiprintf_r+0x2a>
 800308e:	89ab      	ldrh	r3, [r5, #12]
 8003090:	059a      	lsls	r2, r3, #22
 8003092:	d402      	bmi.n	800309a <_vfiprintf_r+0x2a>
 8003094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003096:	f7ff ff64 	bl	8002f62 <__retarget_lock_acquire_recursive>
 800309a:	89ab      	ldrh	r3, [r5, #12]
 800309c:	071b      	lsls	r3, r3, #28
 800309e:	d501      	bpl.n	80030a4 <_vfiprintf_r+0x34>
 80030a0:	692b      	ldr	r3, [r5, #16]
 80030a2:	b99b      	cbnz	r3, 80030cc <_vfiprintf_r+0x5c>
 80030a4:	4629      	mov	r1, r5
 80030a6:	4630      	mov	r0, r6
 80030a8:	f000 fb78 	bl	800379c <__swsetup_r>
 80030ac:	b170      	cbz	r0, 80030cc <_vfiprintf_r+0x5c>
 80030ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80030b0:	07dc      	lsls	r4, r3, #31
 80030b2:	d504      	bpl.n	80030be <_vfiprintf_r+0x4e>
 80030b4:	f04f 30ff 	mov.w	r0, #4294967295
 80030b8:	b01d      	add	sp, #116	; 0x74
 80030ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030be:	89ab      	ldrh	r3, [r5, #12]
 80030c0:	0598      	lsls	r0, r3, #22
 80030c2:	d4f7      	bmi.n	80030b4 <_vfiprintf_r+0x44>
 80030c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030c6:	f7ff ff4d 	bl	8002f64 <__retarget_lock_release_recursive>
 80030ca:	e7f3      	b.n	80030b4 <_vfiprintf_r+0x44>
 80030cc:	2300      	movs	r3, #0
 80030ce:	9309      	str	r3, [sp, #36]	; 0x24
 80030d0:	2320      	movs	r3, #32
 80030d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80030da:	2330      	movs	r3, #48	; 0x30
 80030dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003290 <_vfiprintf_r+0x220>
 80030e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030e4:	f04f 0901 	mov.w	r9, #1
 80030e8:	4623      	mov	r3, r4
 80030ea:	469a      	mov	sl, r3
 80030ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030f0:	b10a      	cbz	r2, 80030f6 <_vfiprintf_r+0x86>
 80030f2:	2a25      	cmp	r2, #37	; 0x25
 80030f4:	d1f9      	bne.n	80030ea <_vfiprintf_r+0x7a>
 80030f6:	ebba 0b04 	subs.w	fp, sl, r4
 80030fa:	d00b      	beq.n	8003114 <_vfiprintf_r+0xa4>
 80030fc:	465b      	mov	r3, fp
 80030fe:	4622      	mov	r2, r4
 8003100:	4629      	mov	r1, r5
 8003102:	4630      	mov	r0, r6
 8003104:	f7ff ffa1 	bl	800304a <__sfputs_r>
 8003108:	3001      	adds	r0, #1
 800310a:	f000 80a9 	beq.w	8003260 <_vfiprintf_r+0x1f0>
 800310e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003110:	445a      	add	r2, fp
 8003112:	9209      	str	r2, [sp, #36]	; 0x24
 8003114:	f89a 3000 	ldrb.w	r3, [sl]
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80a1 	beq.w	8003260 <_vfiprintf_r+0x1f0>
 800311e:	2300      	movs	r3, #0
 8003120:	f04f 32ff 	mov.w	r2, #4294967295
 8003124:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003128:	f10a 0a01 	add.w	sl, sl, #1
 800312c:	9304      	str	r3, [sp, #16]
 800312e:	9307      	str	r3, [sp, #28]
 8003130:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003134:	931a      	str	r3, [sp, #104]	; 0x68
 8003136:	4654      	mov	r4, sl
 8003138:	2205      	movs	r2, #5
 800313a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800313e:	4854      	ldr	r0, [pc, #336]	; (8003290 <_vfiprintf_r+0x220>)
 8003140:	f7fd f84e 	bl	80001e0 <memchr>
 8003144:	9a04      	ldr	r2, [sp, #16]
 8003146:	b9d8      	cbnz	r0, 8003180 <_vfiprintf_r+0x110>
 8003148:	06d1      	lsls	r1, r2, #27
 800314a:	bf44      	itt	mi
 800314c:	2320      	movmi	r3, #32
 800314e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003152:	0713      	lsls	r3, r2, #28
 8003154:	bf44      	itt	mi
 8003156:	232b      	movmi	r3, #43	; 0x2b
 8003158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800315c:	f89a 3000 	ldrb.w	r3, [sl]
 8003160:	2b2a      	cmp	r3, #42	; 0x2a
 8003162:	d015      	beq.n	8003190 <_vfiprintf_r+0x120>
 8003164:	9a07      	ldr	r2, [sp, #28]
 8003166:	4654      	mov	r4, sl
 8003168:	2000      	movs	r0, #0
 800316a:	f04f 0c0a 	mov.w	ip, #10
 800316e:	4621      	mov	r1, r4
 8003170:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003174:	3b30      	subs	r3, #48	; 0x30
 8003176:	2b09      	cmp	r3, #9
 8003178:	d94d      	bls.n	8003216 <_vfiprintf_r+0x1a6>
 800317a:	b1b0      	cbz	r0, 80031aa <_vfiprintf_r+0x13a>
 800317c:	9207      	str	r2, [sp, #28]
 800317e:	e014      	b.n	80031aa <_vfiprintf_r+0x13a>
 8003180:	eba0 0308 	sub.w	r3, r0, r8
 8003184:	fa09 f303 	lsl.w	r3, r9, r3
 8003188:	4313      	orrs	r3, r2
 800318a:	9304      	str	r3, [sp, #16]
 800318c:	46a2      	mov	sl, r4
 800318e:	e7d2      	b.n	8003136 <_vfiprintf_r+0xc6>
 8003190:	9b03      	ldr	r3, [sp, #12]
 8003192:	1d19      	adds	r1, r3, #4
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	9103      	str	r1, [sp, #12]
 8003198:	2b00      	cmp	r3, #0
 800319a:	bfbb      	ittet	lt
 800319c:	425b      	neglt	r3, r3
 800319e:	f042 0202 	orrlt.w	r2, r2, #2
 80031a2:	9307      	strge	r3, [sp, #28]
 80031a4:	9307      	strlt	r3, [sp, #28]
 80031a6:	bfb8      	it	lt
 80031a8:	9204      	strlt	r2, [sp, #16]
 80031aa:	7823      	ldrb	r3, [r4, #0]
 80031ac:	2b2e      	cmp	r3, #46	; 0x2e
 80031ae:	d10c      	bne.n	80031ca <_vfiprintf_r+0x15a>
 80031b0:	7863      	ldrb	r3, [r4, #1]
 80031b2:	2b2a      	cmp	r3, #42	; 0x2a
 80031b4:	d134      	bne.n	8003220 <_vfiprintf_r+0x1b0>
 80031b6:	9b03      	ldr	r3, [sp, #12]
 80031b8:	1d1a      	adds	r2, r3, #4
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	9203      	str	r2, [sp, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	bfb8      	it	lt
 80031c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80031c6:	3402      	adds	r4, #2
 80031c8:	9305      	str	r3, [sp, #20]
 80031ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80032a0 <_vfiprintf_r+0x230>
 80031ce:	7821      	ldrb	r1, [r4, #0]
 80031d0:	2203      	movs	r2, #3
 80031d2:	4650      	mov	r0, sl
 80031d4:	f7fd f804 	bl	80001e0 <memchr>
 80031d8:	b138      	cbz	r0, 80031ea <_vfiprintf_r+0x17a>
 80031da:	9b04      	ldr	r3, [sp, #16]
 80031dc:	eba0 000a 	sub.w	r0, r0, sl
 80031e0:	2240      	movs	r2, #64	; 0x40
 80031e2:	4082      	lsls	r2, r0
 80031e4:	4313      	orrs	r3, r2
 80031e6:	3401      	adds	r4, #1
 80031e8:	9304      	str	r3, [sp, #16]
 80031ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031ee:	4829      	ldr	r0, [pc, #164]	; (8003294 <_vfiprintf_r+0x224>)
 80031f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031f4:	2206      	movs	r2, #6
 80031f6:	f7fc fff3 	bl	80001e0 <memchr>
 80031fa:	2800      	cmp	r0, #0
 80031fc:	d03f      	beq.n	800327e <_vfiprintf_r+0x20e>
 80031fe:	4b26      	ldr	r3, [pc, #152]	; (8003298 <_vfiprintf_r+0x228>)
 8003200:	bb1b      	cbnz	r3, 800324a <_vfiprintf_r+0x1da>
 8003202:	9b03      	ldr	r3, [sp, #12]
 8003204:	3307      	adds	r3, #7
 8003206:	f023 0307 	bic.w	r3, r3, #7
 800320a:	3308      	adds	r3, #8
 800320c:	9303      	str	r3, [sp, #12]
 800320e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003210:	443b      	add	r3, r7
 8003212:	9309      	str	r3, [sp, #36]	; 0x24
 8003214:	e768      	b.n	80030e8 <_vfiprintf_r+0x78>
 8003216:	fb0c 3202 	mla	r2, ip, r2, r3
 800321a:	460c      	mov	r4, r1
 800321c:	2001      	movs	r0, #1
 800321e:	e7a6      	b.n	800316e <_vfiprintf_r+0xfe>
 8003220:	2300      	movs	r3, #0
 8003222:	3401      	adds	r4, #1
 8003224:	9305      	str	r3, [sp, #20]
 8003226:	4619      	mov	r1, r3
 8003228:	f04f 0c0a 	mov.w	ip, #10
 800322c:	4620      	mov	r0, r4
 800322e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003232:	3a30      	subs	r2, #48	; 0x30
 8003234:	2a09      	cmp	r2, #9
 8003236:	d903      	bls.n	8003240 <_vfiprintf_r+0x1d0>
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0c6      	beq.n	80031ca <_vfiprintf_r+0x15a>
 800323c:	9105      	str	r1, [sp, #20]
 800323e:	e7c4      	b.n	80031ca <_vfiprintf_r+0x15a>
 8003240:	fb0c 2101 	mla	r1, ip, r1, r2
 8003244:	4604      	mov	r4, r0
 8003246:	2301      	movs	r3, #1
 8003248:	e7f0      	b.n	800322c <_vfiprintf_r+0x1bc>
 800324a:	ab03      	add	r3, sp, #12
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	462a      	mov	r2, r5
 8003250:	4b12      	ldr	r3, [pc, #72]	; (800329c <_vfiprintf_r+0x22c>)
 8003252:	a904      	add	r1, sp, #16
 8003254:	4630      	mov	r0, r6
 8003256:	f3af 8000 	nop.w
 800325a:	4607      	mov	r7, r0
 800325c:	1c78      	adds	r0, r7, #1
 800325e:	d1d6      	bne.n	800320e <_vfiprintf_r+0x19e>
 8003260:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003262:	07d9      	lsls	r1, r3, #31
 8003264:	d405      	bmi.n	8003272 <_vfiprintf_r+0x202>
 8003266:	89ab      	ldrh	r3, [r5, #12]
 8003268:	059a      	lsls	r2, r3, #22
 800326a:	d402      	bmi.n	8003272 <_vfiprintf_r+0x202>
 800326c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800326e:	f7ff fe79 	bl	8002f64 <__retarget_lock_release_recursive>
 8003272:	89ab      	ldrh	r3, [r5, #12]
 8003274:	065b      	lsls	r3, r3, #25
 8003276:	f53f af1d 	bmi.w	80030b4 <_vfiprintf_r+0x44>
 800327a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800327c:	e71c      	b.n	80030b8 <_vfiprintf_r+0x48>
 800327e:	ab03      	add	r3, sp, #12
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	462a      	mov	r2, r5
 8003284:	4b05      	ldr	r3, [pc, #20]	; (800329c <_vfiprintf_r+0x22c>)
 8003286:	a904      	add	r1, sp, #16
 8003288:	4630      	mov	r0, r6
 800328a:	f000 f879 	bl	8003380 <_printf_i>
 800328e:	e7e4      	b.n	800325a <_vfiprintf_r+0x1ea>
 8003290:	0800398c 	.word	0x0800398c
 8003294:	08003996 	.word	0x08003996
 8003298:	00000000 	.word	0x00000000
 800329c:	0800304b 	.word	0x0800304b
 80032a0:	08003992 	.word	0x08003992

080032a4 <_printf_common>:
 80032a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032a8:	4616      	mov	r6, r2
 80032aa:	4699      	mov	r9, r3
 80032ac:	688a      	ldr	r2, [r1, #8]
 80032ae:	690b      	ldr	r3, [r1, #16]
 80032b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032b4:	4293      	cmp	r3, r2
 80032b6:	bfb8      	it	lt
 80032b8:	4613      	movlt	r3, r2
 80032ba:	6033      	str	r3, [r6, #0]
 80032bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032c0:	4607      	mov	r7, r0
 80032c2:	460c      	mov	r4, r1
 80032c4:	b10a      	cbz	r2, 80032ca <_printf_common+0x26>
 80032c6:	3301      	adds	r3, #1
 80032c8:	6033      	str	r3, [r6, #0]
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	0699      	lsls	r1, r3, #26
 80032ce:	bf42      	ittt	mi
 80032d0:	6833      	ldrmi	r3, [r6, #0]
 80032d2:	3302      	addmi	r3, #2
 80032d4:	6033      	strmi	r3, [r6, #0]
 80032d6:	6825      	ldr	r5, [r4, #0]
 80032d8:	f015 0506 	ands.w	r5, r5, #6
 80032dc:	d106      	bne.n	80032ec <_printf_common+0x48>
 80032de:	f104 0a19 	add.w	sl, r4, #25
 80032e2:	68e3      	ldr	r3, [r4, #12]
 80032e4:	6832      	ldr	r2, [r6, #0]
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	42ab      	cmp	r3, r5
 80032ea:	dc26      	bgt.n	800333a <_printf_common+0x96>
 80032ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032f0:	1e13      	subs	r3, r2, #0
 80032f2:	6822      	ldr	r2, [r4, #0]
 80032f4:	bf18      	it	ne
 80032f6:	2301      	movne	r3, #1
 80032f8:	0692      	lsls	r2, r2, #26
 80032fa:	d42b      	bmi.n	8003354 <_printf_common+0xb0>
 80032fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003300:	4649      	mov	r1, r9
 8003302:	4638      	mov	r0, r7
 8003304:	47c0      	blx	r8
 8003306:	3001      	adds	r0, #1
 8003308:	d01e      	beq.n	8003348 <_printf_common+0xa4>
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	6922      	ldr	r2, [r4, #16]
 800330e:	f003 0306 	and.w	r3, r3, #6
 8003312:	2b04      	cmp	r3, #4
 8003314:	bf02      	ittt	eq
 8003316:	68e5      	ldreq	r5, [r4, #12]
 8003318:	6833      	ldreq	r3, [r6, #0]
 800331a:	1aed      	subeq	r5, r5, r3
 800331c:	68a3      	ldr	r3, [r4, #8]
 800331e:	bf0c      	ite	eq
 8003320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003324:	2500      	movne	r5, #0
 8003326:	4293      	cmp	r3, r2
 8003328:	bfc4      	itt	gt
 800332a:	1a9b      	subgt	r3, r3, r2
 800332c:	18ed      	addgt	r5, r5, r3
 800332e:	2600      	movs	r6, #0
 8003330:	341a      	adds	r4, #26
 8003332:	42b5      	cmp	r5, r6
 8003334:	d11a      	bne.n	800336c <_printf_common+0xc8>
 8003336:	2000      	movs	r0, #0
 8003338:	e008      	b.n	800334c <_printf_common+0xa8>
 800333a:	2301      	movs	r3, #1
 800333c:	4652      	mov	r2, sl
 800333e:	4649      	mov	r1, r9
 8003340:	4638      	mov	r0, r7
 8003342:	47c0      	blx	r8
 8003344:	3001      	adds	r0, #1
 8003346:	d103      	bne.n	8003350 <_printf_common+0xac>
 8003348:	f04f 30ff 	mov.w	r0, #4294967295
 800334c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003350:	3501      	adds	r5, #1
 8003352:	e7c6      	b.n	80032e2 <_printf_common+0x3e>
 8003354:	18e1      	adds	r1, r4, r3
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	2030      	movs	r0, #48	; 0x30
 800335a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800335e:	4422      	add	r2, r4
 8003360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003368:	3302      	adds	r3, #2
 800336a:	e7c7      	b.n	80032fc <_printf_common+0x58>
 800336c:	2301      	movs	r3, #1
 800336e:	4622      	mov	r2, r4
 8003370:	4649      	mov	r1, r9
 8003372:	4638      	mov	r0, r7
 8003374:	47c0      	blx	r8
 8003376:	3001      	adds	r0, #1
 8003378:	d0e6      	beq.n	8003348 <_printf_common+0xa4>
 800337a:	3601      	adds	r6, #1
 800337c:	e7d9      	b.n	8003332 <_printf_common+0x8e>
	...

08003380 <_printf_i>:
 8003380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003384:	7e0f      	ldrb	r7, [r1, #24]
 8003386:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003388:	2f78      	cmp	r7, #120	; 0x78
 800338a:	4691      	mov	r9, r2
 800338c:	4680      	mov	r8, r0
 800338e:	460c      	mov	r4, r1
 8003390:	469a      	mov	sl, r3
 8003392:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003396:	d807      	bhi.n	80033a8 <_printf_i+0x28>
 8003398:	2f62      	cmp	r7, #98	; 0x62
 800339a:	d80a      	bhi.n	80033b2 <_printf_i+0x32>
 800339c:	2f00      	cmp	r7, #0
 800339e:	f000 80d4 	beq.w	800354a <_printf_i+0x1ca>
 80033a2:	2f58      	cmp	r7, #88	; 0x58
 80033a4:	f000 80c0 	beq.w	8003528 <_printf_i+0x1a8>
 80033a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033b0:	e03a      	b.n	8003428 <_printf_i+0xa8>
 80033b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033b6:	2b15      	cmp	r3, #21
 80033b8:	d8f6      	bhi.n	80033a8 <_printf_i+0x28>
 80033ba:	a101      	add	r1, pc, #4	; (adr r1, 80033c0 <_printf_i+0x40>)
 80033bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033c0:	08003419 	.word	0x08003419
 80033c4:	0800342d 	.word	0x0800342d
 80033c8:	080033a9 	.word	0x080033a9
 80033cc:	080033a9 	.word	0x080033a9
 80033d0:	080033a9 	.word	0x080033a9
 80033d4:	080033a9 	.word	0x080033a9
 80033d8:	0800342d 	.word	0x0800342d
 80033dc:	080033a9 	.word	0x080033a9
 80033e0:	080033a9 	.word	0x080033a9
 80033e4:	080033a9 	.word	0x080033a9
 80033e8:	080033a9 	.word	0x080033a9
 80033ec:	08003531 	.word	0x08003531
 80033f0:	08003459 	.word	0x08003459
 80033f4:	080034eb 	.word	0x080034eb
 80033f8:	080033a9 	.word	0x080033a9
 80033fc:	080033a9 	.word	0x080033a9
 8003400:	08003553 	.word	0x08003553
 8003404:	080033a9 	.word	0x080033a9
 8003408:	08003459 	.word	0x08003459
 800340c:	080033a9 	.word	0x080033a9
 8003410:	080033a9 	.word	0x080033a9
 8003414:	080034f3 	.word	0x080034f3
 8003418:	682b      	ldr	r3, [r5, #0]
 800341a:	1d1a      	adds	r2, r3, #4
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	602a      	str	r2, [r5, #0]
 8003420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003428:	2301      	movs	r3, #1
 800342a:	e09f      	b.n	800356c <_printf_i+0x1ec>
 800342c:	6820      	ldr	r0, [r4, #0]
 800342e:	682b      	ldr	r3, [r5, #0]
 8003430:	0607      	lsls	r7, r0, #24
 8003432:	f103 0104 	add.w	r1, r3, #4
 8003436:	6029      	str	r1, [r5, #0]
 8003438:	d501      	bpl.n	800343e <_printf_i+0xbe>
 800343a:	681e      	ldr	r6, [r3, #0]
 800343c:	e003      	b.n	8003446 <_printf_i+0xc6>
 800343e:	0646      	lsls	r6, r0, #25
 8003440:	d5fb      	bpl.n	800343a <_printf_i+0xba>
 8003442:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003446:	2e00      	cmp	r6, #0
 8003448:	da03      	bge.n	8003452 <_printf_i+0xd2>
 800344a:	232d      	movs	r3, #45	; 0x2d
 800344c:	4276      	negs	r6, r6
 800344e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003452:	485a      	ldr	r0, [pc, #360]	; (80035bc <_printf_i+0x23c>)
 8003454:	230a      	movs	r3, #10
 8003456:	e012      	b.n	800347e <_printf_i+0xfe>
 8003458:	682b      	ldr	r3, [r5, #0]
 800345a:	6820      	ldr	r0, [r4, #0]
 800345c:	1d19      	adds	r1, r3, #4
 800345e:	6029      	str	r1, [r5, #0]
 8003460:	0605      	lsls	r5, r0, #24
 8003462:	d501      	bpl.n	8003468 <_printf_i+0xe8>
 8003464:	681e      	ldr	r6, [r3, #0]
 8003466:	e002      	b.n	800346e <_printf_i+0xee>
 8003468:	0641      	lsls	r1, r0, #25
 800346a:	d5fb      	bpl.n	8003464 <_printf_i+0xe4>
 800346c:	881e      	ldrh	r6, [r3, #0]
 800346e:	4853      	ldr	r0, [pc, #332]	; (80035bc <_printf_i+0x23c>)
 8003470:	2f6f      	cmp	r7, #111	; 0x6f
 8003472:	bf0c      	ite	eq
 8003474:	2308      	moveq	r3, #8
 8003476:	230a      	movne	r3, #10
 8003478:	2100      	movs	r1, #0
 800347a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800347e:	6865      	ldr	r5, [r4, #4]
 8003480:	60a5      	str	r5, [r4, #8]
 8003482:	2d00      	cmp	r5, #0
 8003484:	bfa2      	ittt	ge
 8003486:	6821      	ldrge	r1, [r4, #0]
 8003488:	f021 0104 	bicge.w	r1, r1, #4
 800348c:	6021      	strge	r1, [r4, #0]
 800348e:	b90e      	cbnz	r6, 8003494 <_printf_i+0x114>
 8003490:	2d00      	cmp	r5, #0
 8003492:	d04b      	beq.n	800352c <_printf_i+0x1ac>
 8003494:	4615      	mov	r5, r2
 8003496:	fbb6 f1f3 	udiv	r1, r6, r3
 800349a:	fb03 6711 	mls	r7, r3, r1, r6
 800349e:	5dc7      	ldrb	r7, [r0, r7]
 80034a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80034a4:	4637      	mov	r7, r6
 80034a6:	42bb      	cmp	r3, r7
 80034a8:	460e      	mov	r6, r1
 80034aa:	d9f4      	bls.n	8003496 <_printf_i+0x116>
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d10b      	bne.n	80034c8 <_printf_i+0x148>
 80034b0:	6823      	ldr	r3, [r4, #0]
 80034b2:	07de      	lsls	r6, r3, #31
 80034b4:	d508      	bpl.n	80034c8 <_printf_i+0x148>
 80034b6:	6923      	ldr	r3, [r4, #16]
 80034b8:	6861      	ldr	r1, [r4, #4]
 80034ba:	4299      	cmp	r1, r3
 80034bc:	bfde      	ittt	le
 80034be:	2330      	movle	r3, #48	; 0x30
 80034c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034c8:	1b52      	subs	r2, r2, r5
 80034ca:	6122      	str	r2, [r4, #16]
 80034cc:	f8cd a000 	str.w	sl, [sp]
 80034d0:	464b      	mov	r3, r9
 80034d2:	aa03      	add	r2, sp, #12
 80034d4:	4621      	mov	r1, r4
 80034d6:	4640      	mov	r0, r8
 80034d8:	f7ff fee4 	bl	80032a4 <_printf_common>
 80034dc:	3001      	adds	r0, #1
 80034de:	d14a      	bne.n	8003576 <_printf_i+0x1f6>
 80034e0:	f04f 30ff 	mov.w	r0, #4294967295
 80034e4:	b004      	add	sp, #16
 80034e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	f043 0320 	orr.w	r3, r3, #32
 80034f0:	6023      	str	r3, [r4, #0]
 80034f2:	4833      	ldr	r0, [pc, #204]	; (80035c0 <_printf_i+0x240>)
 80034f4:	2778      	movs	r7, #120	; 0x78
 80034f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	6829      	ldr	r1, [r5, #0]
 80034fe:	061f      	lsls	r7, r3, #24
 8003500:	f851 6b04 	ldr.w	r6, [r1], #4
 8003504:	d402      	bmi.n	800350c <_printf_i+0x18c>
 8003506:	065f      	lsls	r7, r3, #25
 8003508:	bf48      	it	mi
 800350a:	b2b6      	uxthmi	r6, r6
 800350c:	07df      	lsls	r7, r3, #31
 800350e:	bf48      	it	mi
 8003510:	f043 0320 	orrmi.w	r3, r3, #32
 8003514:	6029      	str	r1, [r5, #0]
 8003516:	bf48      	it	mi
 8003518:	6023      	strmi	r3, [r4, #0]
 800351a:	b91e      	cbnz	r6, 8003524 <_printf_i+0x1a4>
 800351c:	6823      	ldr	r3, [r4, #0]
 800351e:	f023 0320 	bic.w	r3, r3, #32
 8003522:	6023      	str	r3, [r4, #0]
 8003524:	2310      	movs	r3, #16
 8003526:	e7a7      	b.n	8003478 <_printf_i+0xf8>
 8003528:	4824      	ldr	r0, [pc, #144]	; (80035bc <_printf_i+0x23c>)
 800352a:	e7e4      	b.n	80034f6 <_printf_i+0x176>
 800352c:	4615      	mov	r5, r2
 800352e:	e7bd      	b.n	80034ac <_printf_i+0x12c>
 8003530:	682b      	ldr	r3, [r5, #0]
 8003532:	6826      	ldr	r6, [r4, #0]
 8003534:	6961      	ldr	r1, [r4, #20]
 8003536:	1d18      	adds	r0, r3, #4
 8003538:	6028      	str	r0, [r5, #0]
 800353a:	0635      	lsls	r5, r6, #24
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	d501      	bpl.n	8003544 <_printf_i+0x1c4>
 8003540:	6019      	str	r1, [r3, #0]
 8003542:	e002      	b.n	800354a <_printf_i+0x1ca>
 8003544:	0670      	lsls	r0, r6, #25
 8003546:	d5fb      	bpl.n	8003540 <_printf_i+0x1c0>
 8003548:	8019      	strh	r1, [r3, #0]
 800354a:	2300      	movs	r3, #0
 800354c:	6123      	str	r3, [r4, #16]
 800354e:	4615      	mov	r5, r2
 8003550:	e7bc      	b.n	80034cc <_printf_i+0x14c>
 8003552:	682b      	ldr	r3, [r5, #0]
 8003554:	1d1a      	adds	r2, r3, #4
 8003556:	602a      	str	r2, [r5, #0]
 8003558:	681d      	ldr	r5, [r3, #0]
 800355a:	6862      	ldr	r2, [r4, #4]
 800355c:	2100      	movs	r1, #0
 800355e:	4628      	mov	r0, r5
 8003560:	f7fc fe3e 	bl	80001e0 <memchr>
 8003564:	b108      	cbz	r0, 800356a <_printf_i+0x1ea>
 8003566:	1b40      	subs	r0, r0, r5
 8003568:	6060      	str	r0, [r4, #4]
 800356a:	6863      	ldr	r3, [r4, #4]
 800356c:	6123      	str	r3, [r4, #16]
 800356e:	2300      	movs	r3, #0
 8003570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003574:	e7aa      	b.n	80034cc <_printf_i+0x14c>
 8003576:	6923      	ldr	r3, [r4, #16]
 8003578:	462a      	mov	r2, r5
 800357a:	4649      	mov	r1, r9
 800357c:	4640      	mov	r0, r8
 800357e:	47d0      	blx	sl
 8003580:	3001      	adds	r0, #1
 8003582:	d0ad      	beq.n	80034e0 <_printf_i+0x160>
 8003584:	6823      	ldr	r3, [r4, #0]
 8003586:	079b      	lsls	r3, r3, #30
 8003588:	d413      	bmi.n	80035b2 <_printf_i+0x232>
 800358a:	68e0      	ldr	r0, [r4, #12]
 800358c:	9b03      	ldr	r3, [sp, #12]
 800358e:	4298      	cmp	r0, r3
 8003590:	bfb8      	it	lt
 8003592:	4618      	movlt	r0, r3
 8003594:	e7a6      	b.n	80034e4 <_printf_i+0x164>
 8003596:	2301      	movs	r3, #1
 8003598:	4632      	mov	r2, r6
 800359a:	4649      	mov	r1, r9
 800359c:	4640      	mov	r0, r8
 800359e:	47d0      	blx	sl
 80035a0:	3001      	adds	r0, #1
 80035a2:	d09d      	beq.n	80034e0 <_printf_i+0x160>
 80035a4:	3501      	adds	r5, #1
 80035a6:	68e3      	ldr	r3, [r4, #12]
 80035a8:	9903      	ldr	r1, [sp, #12]
 80035aa:	1a5b      	subs	r3, r3, r1
 80035ac:	42ab      	cmp	r3, r5
 80035ae:	dcf2      	bgt.n	8003596 <_printf_i+0x216>
 80035b0:	e7eb      	b.n	800358a <_printf_i+0x20a>
 80035b2:	2500      	movs	r5, #0
 80035b4:	f104 0619 	add.w	r6, r4, #25
 80035b8:	e7f5      	b.n	80035a6 <_printf_i+0x226>
 80035ba:	bf00      	nop
 80035bc:	0800399d 	.word	0x0800399d
 80035c0:	080039ae 	.word	0x080039ae

080035c4 <__sflush_r>:
 80035c4:	898a      	ldrh	r2, [r1, #12]
 80035c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035ca:	4605      	mov	r5, r0
 80035cc:	0710      	lsls	r0, r2, #28
 80035ce:	460c      	mov	r4, r1
 80035d0:	d458      	bmi.n	8003684 <__sflush_r+0xc0>
 80035d2:	684b      	ldr	r3, [r1, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	dc05      	bgt.n	80035e4 <__sflush_r+0x20>
 80035d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80035da:	2b00      	cmp	r3, #0
 80035dc:	dc02      	bgt.n	80035e4 <__sflush_r+0x20>
 80035de:	2000      	movs	r0, #0
 80035e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035e6:	2e00      	cmp	r6, #0
 80035e8:	d0f9      	beq.n	80035de <__sflush_r+0x1a>
 80035ea:	2300      	movs	r3, #0
 80035ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80035f0:	682f      	ldr	r7, [r5, #0]
 80035f2:	6a21      	ldr	r1, [r4, #32]
 80035f4:	602b      	str	r3, [r5, #0]
 80035f6:	d032      	beq.n	800365e <__sflush_r+0x9a>
 80035f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80035fa:	89a3      	ldrh	r3, [r4, #12]
 80035fc:	075a      	lsls	r2, r3, #29
 80035fe:	d505      	bpl.n	800360c <__sflush_r+0x48>
 8003600:	6863      	ldr	r3, [r4, #4]
 8003602:	1ac0      	subs	r0, r0, r3
 8003604:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003606:	b10b      	cbz	r3, 800360c <__sflush_r+0x48>
 8003608:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800360a:	1ac0      	subs	r0, r0, r3
 800360c:	2300      	movs	r3, #0
 800360e:	4602      	mov	r2, r0
 8003610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003612:	6a21      	ldr	r1, [r4, #32]
 8003614:	4628      	mov	r0, r5
 8003616:	47b0      	blx	r6
 8003618:	1c43      	adds	r3, r0, #1
 800361a:	89a3      	ldrh	r3, [r4, #12]
 800361c:	d106      	bne.n	800362c <__sflush_r+0x68>
 800361e:	6829      	ldr	r1, [r5, #0]
 8003620:	291d      	cmp	r1, #29
 8003622:	d82b      	bhi.n	800367c <__sflush_r+0xb8>
 8003624:	4a29      	ldr	r2, [pc, #164]	; (80036cc <__sflush_r+0x108>)
 8003626:	410a      	asrs	r2, r1
 8003628:	07d6      	lsls	r6, r2, #31
 800362a:	d427      	bmi.n	800367c <__sflush_r+0xb8>
 800362c:	2200      	movs	r2, #0
 800362e:	6062      	str	r2, [r4, #4]
 8003630:	04d9      	lsls	r1, r3, #19
 8003632:	6922      	ldr	r2, [r4, #16]
 8003634:	6022      	str	r2, [r4, #0]
 8003636:	d504      	bpl.n	8003642 <__sflush_r+0x7e>
 8003638:	1c42      	adds	r2, r0, #1
 800363a:	d101      	bne.n	8003640 <__sflush_r+0x7c>
 800363c:	682b      	ldr	r3, [r5, #0]
 800363e:	b903      	cbnz	r3, 8003642 <__sflush_r+0x7e>
 8003640:	6560      	str	r0, [r4, #84]	; 0x54
 8003642:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003644:	602f      	str	r7, [r5, #0]
 8003646:	2900      	cmp	r1, #0
 8003648:	d0c9      	beq.n	80035de <__sflush_r+0x1a>
 800364a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800364e:	4299      	cmp	r1, r3
 8003650:	d002      	beq.n	8003658 <__sflush_r+0x94>
 8003652:	4628      	mov	r0, r5
 8003654:	f7ff fc96 	bl	8002f84 <_free_r>
 8003658:	2000      	movs	r0, #0
 800365a:	6360      	str	r0, [r4, #52]	; 0x34
 800365c:	e7c0      	b.n	80035e0 <__sflush_r+0x1c>
 800365e:	2301      	movs	r3, #1
 8003660:	4628      	mov	r0, r5
 8003662:	47b0      	blx	r6
 8003664:	1c41      	adds	r1, r0, #1
 8003666:	d1c8      	bne.n	80035fa <__sflush_r+0x36>
 8003668:	682b      	ldr	r3, [r5, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0c5      	beq.n	80035fa <__sflush_r+0x36>
 800366e:	2b1d      	cmp	r3, #29
 8003670:	d001      	beq.n	8003676 <__sflush_r+0xb2>
 8003672:	2b16      	cmp	r3, #22
 8003674:	d101      	bne.n	800367a <__sflush_r+0xb6>
 8003676:	602f      	str	r7, [r5, #0]
 8003678:	e7b1      	b.n	80035de <__sflush_r+0x1a>
 800367a:	89a3      	ldrh	r3, [r4, #12]
 800367c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003680:	81a3      	strh	r3, [r4, #12]
 8003682:	e7ad      	b.n	80035e0 <__sflush_r+0x1c>
 8003684:	690f      	ldr	r7, [r1, #16]
 8003686:	2f00      	cmp	r7, #0
 8003688:	d0a9      	beq.n	80035de <__sflush_r+0x1a>
 800368a:	0793      	lsls	r3, r2, #30
 800368c:	680e      	ldr	r6, [r1, #0]
 800368e:	bf08      	it	eq
 8003690:	694b      	ldreq	r3, [r1, #20]
 8003692:	600f      	str	r7, [r1, #0]
 8003694:	bf18      	it	ne
 8003696:	2300      	movne	r3, #0
 8003698:	eba6 0807 	sub.w	r8, r6, r7
 800369c:	608b      	str	r3, [r1, #8]
 800369e:	f1b8 0f00 	cmp.w	r8, #0
 80036a2:	dd9c      	ble.n	80035de <__sflush_r+0x1a>
 80036a4:	6a21      	ldr	r1, [r4, #32]
 80036a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80036a8:	4643      	mov	r3, r8
 80036aa:	463a      	mov	r2, r7
 80036ac:	4628      	mov	r0, r5
 80036ae:	47b0      	blx	r6
 80036b0:	2800      	cmp	r0, #0
 80036b2:	dc06      	bgt.n	80036c2 <__sflush_r+0xfe>
 80036b4:	89a3      	ldrh	r3, [r4, #12]
 80036b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036ba:	81a3      	strh	r3, [r4, #12]
 80036bc:	f04f 30ff 	mov.w	r0, #4294967295
 80036c0:	e78e      	b.n	80035e0 <__sflush_r+0x1c>
 80036c2:	4407      	add	r7, r0
 80036c4:	eba8 0800 	sub.w	r8, r8, r0
 80036c8:	e7e9      	b.n	800369e <__sflush_r+0xda>
 80036ca:	bf00      	nop
 80036cc:	dfbffffe 	.word	0xdfbffffe

080036d0 <_fflush_r>:
 80036d0:	b538      	push	{r3, r4, r5, lr}
 80036d2:	690b      	ldr	r3, [r1, #16]
 80036d4:	4605      	mov	r5, r0
 80036d6:	460c      	mov	r4, r1
 80036d8:	b913      	cbnz	r3, 80036e0 <_fflush_r+0x10>
 80036da:	2500      	movs	r5, #0
 80036dc:	4628      	mov	r0, r5
 80036de:	bd38      	pop	{r3, r4, r5, pc}
 80036e0:	b118      	cbz	r0, 80036ea <_fflush_r+0x1a>
 80036e2:	6a03      	ldr	r3, [r0, #32]
 80036e4:	b90b      	cbnz	r3, 80036ea <_fflush_r+0x1a>
 80036e6:	f7ff fb27 	bl	8002d38 <__sinit>
 80036ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f3      	beq.n	80036da <_fflush_r+0xa>
 80036f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80036f4:	07d0      	lsls	r0, r2, #31
 80036f6:	d404      	bmi.n	8003702 <_fflush_r+0x32>
 80036f8:	0599      	lsls	r1, r3, #22
 80036fa:	d402      	bmi.n	8003702 <_fflush_r+0x32>
 80036fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036fe:	f7ff fc30 	bl	8002f62 <__retarget_lock_acquire_recursive>
 8003702:	4628      	mov	r0, r5
 8003704:	4621      	mov	r1, r4
 8003706:	f7ff ff5d 	bl	80035c4 <__sflush_r>
 800370a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800370c:	07da      	lsls	r2, r3, #31
 800370e:	4605      	mov	r5, r0
 8003710:	d4e4      	bmi.n	80036dc <_fflush_r+0xc>
 8003712:	89a3      	ldrh	r3, [r4, #12]
 8003714:	059b      	lsls	r3, r3, #22
 8003716:	d4e1      	bmi.n	80036dc <_fflush_r+0xc>
 8003718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800371a:	f7ff fc23 	bl	8002f64 <__retarget_lock_release_recursive>
 800371e:	e7dd      	b.n	80036dc <_fflush_r+0xc>

08003720 <__swbuf_r>:
 8003720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003722:	460e      	mov	r6, r1
 8003724:	4614      	mov	r4, r2
 8003726:	4605      	mov	r5, r0
 8003728:	b118      	cbz	r0, 8003732 <__swbuf_r+0x12>
 800372a:	6a03      	ldr	r3, [r0, #32]
 800372c:	b90b      	cbnz	r3, 8003732 <__swbuf_r+0x12>
 800372e:	f7ff fb03 	bl	8002d38 <__sinit>
 8003732:	69a3      	ldr	r3, [r4, #24]
 8003734:	60a3      	str	r3, [r4, #8]
 8003736:	89a3      	ldrh	r3, [r4, #12]
 8003738:	071a      	lsls	r2, r3, #28
 800373a:	d525      	bpl.n	8003788 <__swbuf_r+0x68>
 800373c:	6923      	ldr	r3, [r4, #16]
 800373e:	b31b      	cbz	r3, 8003788 <__swbuf_r+0x68>
 8003740:	6823      	ldr	r3, [r4, #0]
 8003742:	6922      	ldr	r2, [r4, #16]
 8003744:	1a98      	subs	r0, r3, r2
 8003746:	6963      	ldr	r3, [r4, #20]
 8003748:	b2f6      	uxtb	r6, r6
 800374a:	4283      	cmp	r3, r0
 800374c:	4637      	mov	r7, r6
 800374e:	dc04      	bgt.n	800375a <__swbuf_r+0x3a>
 8003750:	4621      	mov	r1, r4
 8003752:	4628      	mov	r0, r5
 8003754:	f7ff ffbc 	bl	80036d0 <_fflush_r>
 8003758:	b9e0      	cbnz	r0, 8003794 <__swbuf_r+0x74>
 800375a:	68a3      	ldr	r3, [r4, #8]
 800375c:	3b01      	subs	r3, #1
 800375e:	60a3      	str	r3, [r4, #8]
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	6022      	str	r2, [r4, #0]
 8003766:	701e      	strb	r6, [r3, #0]
 8003768:	6962      	ldr	r2, [r4, #20]
 800376a:	1c43      	adds	r3, r0, #1
 800376c:	429a      	cmp	r2, r3
 800376e:	d004      	beq.n	800377a <__swbuf_r+0x5a>
 8003770:	89a3      	ldrh	r3, [r4, #12]
 8003772:	07db      	lsls	r3, r3, #31
 8003774:	d506      	bpl.n	8003784 <__swbuf_r+0x64>
 8003776:	2e0a      	cmp	r6, #10
 8003778:	d104      	bne.n	8003784 <__swbuf_r+0x64>
 800377a:	4621      	mov	r1, r4
 800377c:	4628      	mov	r0, r5
 800377e:	f7ff ffa7 	bl	80036d0 <_fflush_r>
 8003782:	b938      	cbnz	r0, 8003794 <__swbuf_r+0x74>
 8003784:	4638      	mov	r0, r7
 8003786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003788:	4621      	mov	r1, r4
 800378a:	4628      	mov	r0, r5
 800378c:	f000 f806 	bl	800379c <__swsetup_r>
 8003790:	2800      	cmp	r0, #0
 8003792:	d0d5      	beq.n	8003740 <__swbuf_r+0x20>
 8003794:	f04f 37ff 	mov.w	r7, #4294967295
 8003798:	e7f4      	b.n	8003784 <__swbuf_r+0x64>
	...

0800379c <__swsetup_r>:
 800379c:	b538      	push	{r3, r4, r5, lr}
 800379e:	4b2a      	ldr	r3, [pc, #168]	; (8003848 <__swsetup_r+0xac>)
 80037a0:	4605      	mov	r5, r0
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	460c      	mov	r4, r1
 80037a6:	b118      	cbz	r0, 80037b0 <__swsetup_r+0x14>
 80037a8:	6a03      	ldr	r3, [r0, #32]
 80037aa:	b90b      	cbnz	r3, 80037b0 <__swsetup_r+0x14>
 80037ac:	f7ff fac4 	bl	8002d38 <__sinit>
 80037b0:	89a3      	ldrh	r3, [r4, #12]
 80037b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037b6:	0718      	lsls	r0, r3, #28
 80037b8:	d422      	bmi.n	8003800 <__swsetup_r+0x64>
 80037ba:	06d9      	lsls	r1, r3, #27
 80037bc:	d407      	bmi.n	80037ce <__swsetup_r+0x32>
 80037be:	2309      	movs	r3, #9
 80037c0:	602b      	str	r3, [r5, #0]
 80037c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80037c6:	81a3      	strh	r3, [r4, #12]
 80037c8:	f04f 30ff 	mov.w	r0, #4294967295
 80037cc:	e034      	b.n	8003838 <__swsetup_r+0x9c>
 80037ce:	0758      	lsls	r0, r3, #29
 80037d0:	d512      	bpl.n	80037f8 <__swsetup_r+0x5c>
 80037d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037d4:	b141      	cbz	r1, 80037e8 <__swsetup_r+0x4c>
 80037d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037da:	4299      	cmp	r1, r3
 80037dc:	d002      	beq.n	80037e4 <__swsetup_r+0x48>
 80037de:	4628      	mov	r0, r5
 80037e0:	f7ff fbd0 	bl	8002f84 <_free_r>
 80037e4:	2300      	movs	r3, #0
 80037e6:	6363      	str	r3, [r4, #52]	; 0x34
 80037e8:	89a3      	ldrh	r3, [r4, #12]
 80037ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80037ee:	81a3      	strh	r3, [r4, #12]
 80037f0:	2300      	movs	r3, #0
 80037f2:	6063      	str	r3, [r4, #4]
 80037f4:	6923      	ldr	r3, [r4, #16]
 80037f6:	6023      	str	r3, [r4, #0]
 80037f8:	89a3      	ldrh	r3, [r4, #12]
 80037fa:	f043 0308 	orr.w	r3, r3, #8
 80037fe:	81a3      	strh	r3, [r4, #12]
 8003800:	6923      	ldr	r3, [r4, #16]
 8003802:	b94b      	cbnz	r3, 8003818 <__swsetup_r+0x7c>
 8003804:	89a3      	ldrh	r3, [r4, #12]
 8003806:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800380a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800380e:	d003      	beq.n	8003818 <__swsetup_r+0x7c>
 8003810:	4621      	mov	r1, r4
 8003812:	4628      	mov	r0, r5
 8003814:	f000 f840 	bl	8003898 <__smakebuf_r>
 8003818:	89a0      	ldrh	r0, [r4, #12]
 800381a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800381e:	f010 0301 	ands.w	r3, r0, #1
 8003822:	d00a      	beq.n	800383a <__swsetup_r+0x9e>
 8003824:	2300      	movs	r3, #0
 8003826:	60a3      	str	r3, [r4, #8]
 8003828:	6963      	ldr	r3, [r4, #20]
 800382a:	425b      	negs	r3, r3
 800382c:	61a3      	str	r3, [r4, #24]
 800382e:	6923      	ldr	r3, [r4, #16]
 8003830:	b943      	cbnz	r3, 8003844 <__swsetup_r+0xa8>
 8003832:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003836:	d1c4      	bne.n	80037c2 <__swsetup_r+0x26>
 8003838:	bd38      	pop	{r3, r4, r5, pc}
 800383a:	0781      	lsls	r1, r0, #30
 800383c:	bf58      	it	pl
 800383e:	6963      	ldrpl	r3, [r4, #20]
 8003840:	60a3      	str	r3, [r4, #8]
 8003842:	e7f4      	b.n	800382e <__swsetup_r+0x92>
 8003844:	2000      	movs	r0, #0
 8003846:	e7f7      	b.n	8003838 <__swsetup_r+0x9c>
 8003848:	20000064 	.word	0x20000064

0800384c <__swhatbuf_r>:
 800384c:	b570      	push	{r4, r5, r6, lr}
 800384e:	460c      	mov	r4, r1
 8003850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003854:	2900      	cmp	r1, #0
 8003856:	b096      	sub	sp, #88	; 0x58
 8003858:	4615      	mov	r5, r2
 800385a:	461e      	mov	r6, r3
 800385c:	da0d      	bge.n	800387a <__swhatbuf_r+0x2e>
 800385e:	89a3      	ldrh	r3, [r4, #12]
 8003860:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003864:	f04f 0100 	mov.w	r1, #0
 8003868:	bf0c      	ite	eq
 800386a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800386e:	2340      	movne	r3, #64	; 0x40
 8003870:	2000      	movs	r0, #0
 8003872:	6031      	str	r1, [r6, #0]
 8003874:	602b      	str	r3, [r5, #0]
 8003876:	b016      	add	sp, #88	; 0x58
 8003878:	bd70      	pop	{r4, r5, r6, pc}
 800387a:	466a      	mov	r2, sp
 800387c:	f000 f848 	bl	8003910 <_fstat_r>
 8003880:	2800      	cmp	r0, #0
 8003882:	dbec      	blt.n	800385e <__swhatbuf_r+0x12>
 8003884:	9901      	ldr	r1, [sp, #4]
 8003886:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800388a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800388e:	4259      	negs	r1, r3
 8003890:	4159      	adcs	r1, r3
 8003892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003896:	e7eb      	b.n	8003870 <__swhatbuf_r+0x24>

08003898 <__smakebuf_r>:
 8003898:	898b      	ldrh	r3, [r1, #12]
 800389a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800389c:	079d      	lsls	r5, r3, #30
 800389e:	4606      	mov	r6, r0
 80038a0:	460c      	mov	r4, r1
 80038a2:	d507      	bpl.n	80038b4 <__smakebuf_r+0x1c>
 80038a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80038a8:	6023      	str	r3, [r4, #0]
 80038aa:	6123      	str	r3, [r4, #16]
 80038ac:	2301      	movs	r3, #1
 80038ae:	6163      	str	r3, [r4, #20]
 80038b0:	b002      	add	sp, #8
 80038b2:	bd70      	pop	{r4, r5, r6, pc}
 80038b4:	ab01      	add	r3, sp, #4
 80038b6:	466a      	mov	r2, sp
 80038b8:	f7ff ffc8 	bl	800384c <__swhatbuf_r>
 80038bc:	9900      	ldr	r1, [sp, #0]
 80038be:	4605      	mov	r5, r0
 80038c0:	4630      	mov	r0, r6
 80038c2:	f7ff f921 	bl	8002b08 <_malloc_r>
 80038c6:	b948      	cbnz	r0, 80038dc <__smakebuf_r+0x44>
 80038c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038cc:	059a      	lsls	r2, r3, #22
 80038ce:	d4ef      	bmi.n	80038b0 <__smakebuf_r+0x18>
 80038d0:	f023 0303 	bic.w	r3, r3, #3
 80038d4:	f043 0302 	orr.w	r3, r3, #2
 80038d8:	81a3      	strh	r3, [r4, #12]
 80038da:	e7e3      	b.n	80038a4 <__smakebuf_r+0xc>
 80038dc:	89a3      	ldrh	r3, [r4, #12]
 80038de:	6020      	str	r0, [r4, #0]
 80038e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038e4:	81a3      	strh	r3, [r4, #12]
 80038e6:	9b00      	ldr	r3, [sp, #0]
 80038e8:	6163      	str	r3, [r4, #20]
 80038ea:	9b01      	ldr	r3, [sp, #4]
 80038ec:	6120      	str	r0, [r4, #16]
 80038ee:	b15b      	cbz	r3, 8003908 <__smakebuf_r+0x70>
 80038f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038f4:	4630      	mov	r0, r6
 80038f6:	f000 f81d 	bl	8003934 <_isatty_r>
 80038fa:	b128      	cbz	r0, 8003908 <__smakebuf_r+0x70>
 80038fc:	89a3      	ldrh	r3, [r4, #12]
 80038fe:	f023 0303 	bic.w	r3, r3, #3
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	81a3      	strh	r3, [r4, #12]
 8003908:	89a3      	ldrh	r3, [r4, #12]
 800390a:	431d      	orrs	r5, r3
 800390c:	81a5      	strh	r5, [r4, #12]
 800390e:	e7cf      	b.n	80038b0 <__smakebuf_r+0x18>

08003910 <_fstat_r>:
 8003910:	b538      	push	{r3, r4, r5, lr}
 8003912:	4d07      	ldr	r5, [pc, #28]	; (8003930 <_fstat_r+0x20>)
 8003914:	2300      	movs	r3, #0
 8003916:	4604      	mov	r4, r0
 8003918:	4608      	mov	r0, r1
 800391a:	4611      	mov	r1, r2
 800391c:	602b      	str	r3, [r5, #0]
 800391e:	f7fd f820 	bl	8000962 <_fstat>
 8003922:	1c43      	adds	r3, r0, #1
 8003924:	d102      	bne.n	800392c <_fstat_r+0x1c>
 8003926:	682b      	ldr	r3, [r5, #0]
 8003928:	b103      	cbz	r3, 800392c <_fstat_r+0x1c>
 800392a:	6023      	str	r3, [r4, #0]
 800392c:	bd38      	pop	{r3, r4, r5, pc}
 800392e:	bf00      	nop
 8003930:	20000224 	.word	0x20000224

08003934 <_isatty_r>:
 8003934:	b538      	push	{r3, r4, r5, lr}
 8003936:	4d06      	ldr	r5, [pc, #24]	; (8003950 <_isatty_r+0x1c>)
 8003938:	2300      	movs	r3, #0
 800393a:	4604      	mov	r4, r0
 800393c:	4608      	mov	r0, r1
 800393e:	602b      	str	r3, [r5, #0]
 8003940:	f7fd f81f 	bl	8000982 <_isatty>
 8003944:	1c43      	adds	r3, r0, #1
 8003946:	d102      	bne.n	800394e <_isatty_r+0x1a>
 8003948:	682b      	ldr	r3, [r5, #0]
 800394a:	b103      	cbz	r3, 800394e <_isatty_r+0x1a>
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	bd38      	pop	{r3, r4, r5, pc}
 8003950:	20000224 	.word	0x20000224

08003954 <_init>:
 8003954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003956:	bf00      	nop
 8003958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800395a:	bc08      	pop	{r3}
 800395c:	469e      	mov	lr, r3
 800395e:	4770      	bx	lr

08003960 <_fini>:
 8003960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003962:	bf00      	nop
 8003964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003966:	bc08      	pop	{r3}
 8003968:	469e      	mov	lr, r3
 800396a:	4770      	bx	lr
